/**
 * Render an image using probe ray tracing.
 */
#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable

#ifndef LOCAL_SIZE_X
#define LOCAL_SIZE_X 8
#endif
#ifndef LOCAL_SIZE_Y
#define LOCAL_SIZE_Y 8
#endif
#ifndef LOCAL_SIZE_Z
#define LOCAL_SIZE_Z 1
#endif

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

/********************************************* CONSTANTS *******************************************/

#define PI 3.141592
#define INF 10000000000000.0
#define EPSILON 0.001

const float minThickness = 0.03; /**< Min thickness for hit */
const float maxThickness = 0.50; /**< Max thickness for hit */

const float rayBumpEpsilon = 0.001; /**< Epsilon to avoid issues when passing through edges of octahedral projection */

const float minProgressDistance = 0.01; /**< Cancel tracing if the move is smaller than this distance */

const vec2 TEX_SIZE = vec2(1024.0);
const vec2 TEX_SIZE_SMALL = vec2(64.0);
const vec2 TEX_SIZE_SMALLEST = vec2(16.0);

const vec2 INV_TEX_SIZE = vec2(1.0) / TEX_SIZE;
const vec2 INV_TEX_SIZE_SMALL = vec2(1.0) / TEX_SIZE_SMALL;
const vec2 INV_TEX_SIZE_SMALLEST = vec2(1.0) / TEX_SIZE_SMALLEST;

const uint MASK11 = 0x7FF;
const uint MASK10 = 0x3FF;
const uint R_MAX = 2047;
const uint G_MAX = 2047;
const uint G_SHIFT = 11;
const uint B_MAX = 1023;
const uint B_SHIFT = 22;

const uint DEPTH_MASK = 0xFFFF;
const uint DEPTH_MAX = 65535;

const uint NORMAL_ELEMENT_MAX = 255;
const uint NORMAL_ELEMENT_MASK = 0xFF;
const uint NORMALS_SHIFT = 16;
const uint NORMAL1_SHIFT = 0;
const uint NORMAL2_SHIFT = 8;

#define TMP_FAR 100.0

/**
 * Lookup table for debug colors
 */
const vec3 lut[8] = vec3[8](vec3(0, 0, 0),// 0
                            vec3(1, 0, 0),// 1
                            vec3(0, 1, 0),// 2
                            vec3(1, 1, 0),// 3
                            vec3(0, 0, 1),// 4
                            vec3(1, 0, 1),// 5
                            vec3(0, 1, 1),// 6
                            vec3(1, 1, 1) // 7
);
/********************************************* STRUCTS *******************************************/

struct Ray {
  vec3 origin;
  float originSize;
  vec3 direction;
  float directionSize;
};

/********************************************* ENUMS *******************************************/
#define PROBE_VISUAL_TYPE uint
#define PROBE_VISUAL_TYPE_DISABLED 0
#define PROBE_VISUAL_TYPE_COLOR 1
#define PROBE_VISUAL_TYPE_NORMALS 2
#define PROBE_VISUAL_TYPE_DEPTH 3
#define PROBE_VISUAL_TYPE_CAMERA_VIEW 4

#define TRACE_RESULT int
#define TRACE_RESULT_MISS 0
#define TRACE_RESULT_HIT 1
#define TRACE_RESULT_UNKNOWN 2

/********************************************* BINDINGS *******************************************/
/**
 * Various debug values.
 */
layout(binding = 0, std140) uniform Debug {
  PROBE_VISUAL_TYPE probeVisualType;
  uint probeToRender;
  int debugInt;
  int fillHoles;
}
debug;
/**
 * Information about probe grid.
 */
layout(binding = 1, std140) uniform Grid {
  ivec4 gridSize;
  vec4 gridPos;
  float gridStep;
}
grid;
/**
 * Probe image atlas.
 */
layout(binding = 2, rg32f) uniform image2DArray probeImages;
/**
 * Small depth probe atlas.
 */
layout(binding = 3, r32f) uniform image2DArray probeImagesSmall;
/**
 * Output.
 */
layout(binding = 4, rgba8) uniform image2D debugProbeImage;
/**
 * Scene camera info.
 */
layout(binding = 5) uniform UniformCamera {
  vec4 pos;         /**< Position in world space */
  vec4 dir;         /**< Look direction */
  vec4 up;          /**< Up direction */
  mat4 view;        /**< Camera's view matrix */
  mat4 projection;  /**< Camera's projection matrix */
  mat4 invProjView; /**< Camera's inversion projection matrix used to bring ray into world space */
  float near;       /**< Near plane distance */
  float far;        /**< Far plane distance */
  int screenWidth;  /**< Screen resolution x */
  int screenHeight; /**< Screen resolution y */
}
camera;
/**
 * Proximity grid data.
 */
layout(std430, binding = 6) buffer ProxGridData { uint[] data; }
proxGrid;
/**
 * Info about proximity grid.
 */
layout(binding = 7) uniform ProxGridInfo {
  ivec4 gridSize;
  vec4 gridStep;
}
proxGridInfo;

/********************************************* UTIL FUNCTIONS *******************************************/
/**
 * Find the biggest component.
 */
float maxComponent(vec2 a) { return max(a.x, a.y); }
/**
 * Return 1 if value is >= 0, otherwise -1
 */
float signNotZero(float f) { return (f >= 0.0) ? 1.0 : -1.0; }
/**
 * For each component return 1 if it's >= 0, -1 otherwise.
 */
vec2 signNotZero(vec2 v) { return vec2(signNotZero(v.x), signNotZero(v.y)); }
/**
 * Encode a unit vector, as a direction from point, to an octahedral projection on a plane.
 */
vec2 octEncode(in vec3 v) {
  float l1norm = abs(v.x) + abs(v.y) + abs(v.z);
  vec2 result = v.xy * (1.0 / l1norm);
  if (v.z < 0.0) { result = (1.0 - abs(result.yx)) * signNotZero(result.xy); }
  return result;
}
/**
 * Decode [-1, 1] coordinates into direction.
 */
vec3 octDecode(vec2 o) {
  vec3 v = vec3(o.x, o.y, 1.0 - abs(o.x) - abs(o.y));
  if (v.z < 0.0) { v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy); }
  return normalize(v);
}

float lengthSquared(in vec2 v) { return dot(v, v); }
float lengthSquared(in vec3 v) { return dot(v, v); }
float distanceSquared(vec2 v0, vec2 v1) {
  vec2 d = v1 - v0;
  return dot(d, d);
}
int idot(ivec3 a, ivec3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
float squaredLength(vec3 v) { return dot(v, v); }

/**
 * Swap min to a and max to b.
 */
void minSwap(inout float a, inout float b) {
  float temp = min(a, b);
  b = max(a, b);
  a = temp;
}
/**
 * Sort using swap.
 */
void sort(inout vec3 v) {
  minSwap(v[0], v[1]);
  minSwap(v[1], v[2]);
  minSwap(v[0], v[1]);
}
#define LOG_DEPTH_C 1
/**
 * Transform linear depth into logarithmic depth.
 */
float computeLogDepth(float depth) { return log(LOG_DEPTH_C * depth + 1) / log(LOG_DEPTH_C * TMP_FAR + 1); }
/**
 * Transform logarithmic depth into linear depth.
 */
float linearizeLogDepth(float logDepth) { return (pow(LOG_DEPTH_C * TMP_FAR + 1, logDepth) - 1) / LOG_DEPTH_C; }

/********************************************* PROBE  FUNCTIONS *******************************************/
/**
 * Transform world space probe coordinate into its index
 */
int gridCoordToProbeIndex(vec3 probeCoords) {
  return int(probeCoords.x + probeCoords.y * grid.gridSize.x + probeCoords.z * grid.gridSize.x * grid.gridSize.y);
}
/**
 * Convert world space probe coordinate to grid coordinate.
 */
ivec3 baseGridCoord(vec3 X) {
  return clamp(ivec3((X - grid.gridPos.xyz) / grid.gridStep), ivec3(0, 0, 0),
               ivec3(grid.gridSize.xyz) - ivec3(1, 1, 1));
}
/**
 * Convert world space probe coordinate to probe index.
 */
int baseProbeIndex(vec3 X) { return gridCoordToProbeIndex(baseGridCoord(X)); }
/**
 * Convert probe index to its grid coordinate.
 */
ivec3 probeIndexToGridCoord(int index) {
  ivec3 iPos;
  iPos.x = index & (grid.gridSize.x - 1);
  iPos.y = (index & ((grid.gridSize.x * grid.gridSize.y) - 1)) >> findMSB(grid.gridSize.x);
  iPos.z = index >> findMSB(grid.gridSize.x * grid.gridSize.y);

  return iPos;
}
/**
 * Find nearest probe to position.
 */
int nearestProbeIndex(vec3 X, out vec3 probeCoords) {
  probeCoords =
      clamp(round((X - grid.gridPos.xyz) / grid.gridStep), vec3(0, 0, 0), vec3(grid.gridSize.xyz) - vec3(1, 1, 1));
  return gridCoordToProbeIndex(probeCoords);
}
/**
 * Find nearest probe within probe box.
 */
int nearestProbeIndices(vec3 X) {
  vec3 maxProbeCoords = vec3(grid.gridSize.xyz) - vec3(1, 1, 1);
  vec3 floatProbeCoords = (X - grid.gridPos.xyz) / grid.gridStep;
  vec3 baseProbeCoords = clamp(floor(floatProbeCoords), vec3(0, 0, 0), maxProbeCoords);

  float minDist = TMP_FAR;
  int nearestIndex = -1;

  for (int i = 0; i < 8; ++i) {
    vec3 newProbeCoords = min(baseProbeCoords + vec3(i & 1, (i >> 1) & 1, (i >> 2) & 1), maxProbeCoords);
    float d = length(newProbeCoords - floatProbeCoords);
    if (d < minDist) {
      minDist = d;
      nearestIndex = i;
    }
  }

  return nearestIndex;
}
/**
 * Convert grid coordinate to world space coordinate.
 */
vec3 gridCoordToPosition(ivec3 c) { return grid.gridStep * vec3(c) + grid.gridPos.xyz; }
/**
 * Convert probe index to world space location.
 */
vec3 probeLocation(int index) { return gridCoordToPosition(probeIndexToGridCoord(index)); }
/**
 * Calculate probe index based on its base probe and index within box.
 */
int relativeProbeIndex(int baseProbeIndex, int relativeIndex) {
  int numProbes = grid.gridSize.x * grid.gridSize.y * grid.gridSize.z;

  ivec3 offset = ivec3(relativeIndex & 1, (relativeIndex >> 1) & 1, (relativeIndex >> 2) & 1);
  ivec3 stride = ivec3(1, grid.gridSize.x, grid.gridSize.x * grid.gridSize.y);

  return (baseProbeIndex + idot(offset, stride)) & (numProbes - 1);
}
/**
 * Select next cube index.
 */
int nextCycleIndex(int cycleIndex) { return (cycleIndex + 3) & 7; }
/********************************************* VOXEL FIELD FUNCTIONS *******************************************/
#define INVALID_PROX_IDX 0xFFFFu
#define PROX_MASK 0xFFFFu
/**
 * Convert voxel field grid coordinate to index.
 */
uint gridCoordToProxGridIndex(ivec3 voxelCoord) {
  return uint(voxelCoord.x + voxelCoord.y * proxGridInfo.gridSize.x
              + voxelCoord.z * proxGridInfo.gridSize.x * proxGridInfo.gridSize.y);
}
/**
 * Calculate intersection with an AABB. if res.x < res.y then there was a hit.
 */
vec2 intersectAABB(vec3 rayOrigin, vec3 rayDir, vec3 boxMin, vec3 boxMax) {
  vec3 tMin = (boxMin - rayOrigin) / rayDir;
  vec3 tMax = (boxMax - rayOrigin) / rayDir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);
  return vec2(tNear, tFar);
}
/**
 * Check if a point is contained within AABB.
 */
bool isInAABB(vec3 pos, vec3 boxMin, vec3 boxMax) {
  return boxMin.x <= pos.x && boxMin.y <= pos.y && boxMin.z <= pos.z && pos.x <= boxMax.x && pos.y <= boxMax.y
      && pos.z <= boxMax.z;
}
/**
 * Find voxel grid coordinate of the nearast voxel in voxel field.
 */
ivec3 nearestVoxelGridCoord(vec3 pos) {
  return clamp(ivec3((pos - grid.gridPos.xyz) / proxGridInfo.gridStep.xyz), ivec3(0, 0, 0),
               ivec3(proxGridInfo.gridSize.xyz) - ivec3(1, 1, 1));
}
/**
 * Find nearest grid coordinate of the voxel which intersects the ray.
 */
ivec3 nearestVoxelGridCoordFirst(Ray ray) {
  const vec3 gridStart = grid.gridPos.xyz;
  const vec3 gridEnd = grid.gridPos.xyz + grid.gridSize.xyz * grid.gridStep;
  if (!isInAABB(ray.origin, gridStart, gridEnd)) {
    vec2 voxFieldIntersection = intersectAABB(ray.origin, ray.direction, gridStart, gridEnd);
    if (voxFieldIntersection.x <= voxFieldIntersection.y) {
      return nearestVoxelGridCoord(ray.origin + voxFieldIntersection.x * ray.direction);
    }
  }

  return nearestVoxelGridCoord(ray.origin);
}
/**
 * Find index of nearest voxel in voxel field.
 */
uint nearestProxVoxelIndex(vec3 pos) { return gridCoordToProxGridIndex(nearestVoxelGridCoord(pos)); }
/**
 * Find index of nearest voxel in voxel field in ray path.
 */
uint nearestProxVoxelIndexFirst(Ray ray) { return gridCoordToProxGridIndex(nearestVoxelGridCoordFirst(ray)); }
/**
 * Get index of a probe saved inside the voxel. Returns -1 if there's not a valid one.
 */
int getProxProbeIdx(uint proxIdx, uint idx) {
  uint val = (proxGrid.data[proxIdx * 2 + idx / 2] >> (16 * (idx % 2)) & PROX_MASK);
  if ((val & PROX_MASK) == INVALID_PROX_IDX) { return -1; }
  return int(val);
}

/********************************************* ATLAS READING FUNCTIONS *******************************************/
/**
 * Decode normal from probe data.
 */
vec3 decodeNormal(vec2 f) {
  f = f * 2.0f - 1.0f;
  vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
  float t = clamp(-n.z, 0.f, 1.f);
  n.x += n.x >= 0.0 ? -t : t;
  n.y += n.y >= 0.0 ? -t : t;
  return normalize(n);
}
/**
 * Get depth from probe atlas.
 */
float depthFromProbe(uint data) { return linearizeLogDepth(float(data & DEPTH_MASK) / DEPTH_MAX); }
/**
 * Get depth from small probe atlas.
 */
float depthFromSmallProbe(uint data) { return linearizeLogDepth(float(data) / DEPTH_MAX); }
/**
 * Decode normal from probe data.
 */
vec3 normalFromProbe(uint data) {
  const float probeNormalEncoded1 =
      float((data >> (NORMALS_SHIFT + NORMAL1_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
  const float probeNormalEncoded2 =
      float((data >> (NORMALS_SHIFT + NORMAL2_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
  return decodeNormal(vec2(probeNormalEncoded1, probeNormalEncoded2));
}

/********************************************* TRACING FUNCTIONS *******************************************/
/**
 * Convert screen coords to [-1, 1].
 */
vec2 normalizeScreenCoords(vec2 screenCoord, vec2 resolution) {
  vec2 result = 2.0 * (screenCoord / resolution.xy - 0.5);
  result.x *= resolution.x / float(resolution.y);
  return result;
}
/**
 * Calculate ray segments for octahedral projection based on the ray info.
 */
void computeRaySegments(in vec3 origin, in vec3 directionFrac, in float tMin, in float tMax, out float boundaryTs[5]) {
  boundaryTs[0] = tMin;
  vec3 t = origin * -directionFrac;
  sort(t);
  for (int i = 0; i < 3; ++i) { boundaryTs[i + 1] = clamp(t[i], tMin, tMax); }
  boundaryTs[4] = tMax;
}
/**
 * Calculate distance from ray to intersection.
 */
float distanceToIntersection(in Ray ray, in vec3 v) {
  float numer;
  float denom = v.y * ray.direction.z - v.z * ray.direction.y;

  if (abs(denom) > 0.1) {
    numer = ray.origin.y * ray.direction.z - ray.origin.z * ray.direction.y;
  } else {
    numer = ray.origin.x * ray.direction.y - ray.origin.y * ray.direction.x;
    denom = v.x * ray.direction.y - v.y * ray.direction.x;
  }

  return numer / denom;
}
/**
 * Trace within probe space on full resolution.
 */
TRACE_RESULT traceSegmentHighRes(in Ray probeSpaceRay, in vec2 startTexCoord, in vec2 endTexCoord, in int probeIndex,
                                 inout float tMin, inout float tMax, inout vec2 hitProbeTexCoord) {

  vec2 texCoordDelta = endTexCoord - startTexCoord;
  float texCoordDistance = length(texCoordDelta);
  vec2 texCoordDirection = texCoordDelta * (1.0 / texCoordDistance);

  float texCoordStep = INV_TEX_SIZE.x * (texCoordDistance / maxComponent(abs(texCoordDelta)));

  vec3 directionFromProbeBefore = octDecode(startTexCoord * 2.0 - 1.0);
  float distanceFromProbeToRayBefore = max(0.0, distanceToIntersection(probeSpaceRay, directionFromProbeBefore));

  for (float d = 0.0f; d <= texCoordDistance; d += texCoordStep) {
    vec2 texCoord = (texCoordDirection * min(d + texCoordStep * 0.5, texCoordDistance)) + startTexCoord;

    uint savedDepthAndNormalBytes = floatBitsToUint(imageLoad(probeImages, ivec3(TEX_SIZE * texCoord, probeIndex)).y);
    float distanceFromProbeToSurface = depthFromProbe(savedDepthAndNormalBytes);

    float probeNormalEncoded1 =
        float((savedDepthAndNormalBytes >> (NORMALS_SHIFT + NORMAL1_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
    float probeNormalEncoded2 =
        float((savedDepthAndNormalBytes >> (NORMALS_SHIFT + NORMAL2_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
    vec3 normal = decodeNormal(vec2(probeNormalEncoded1, probeNormalEncoded2));

    vec3 directionFromProbe = octDecode(texCoord * 2.0 - 1.0);

    vec2 texCoordAfter = (texCoordDirection * min(d + texCoordStep, texCoordDistance)) + startTexCoord;
    vec3 directionFromProbeAfter = octDecode(texCoordAfter * 2.0 - 1.0);
    float distanceFromProbeToRayAfter = max(0.0, distanceToIntersection(probeSpaceRay, directionFromProbeAfter));
    float maxDistFromProbeToRay = max(distanceFromProbeToRayBefore, distanceFromProbeToRayAfter);

    if (maxDistFromProbeToRay >= distanceFromProbeToSurface) {
      float minDistFromProbeToRay = min(distanceFromProbeToRayBefore, distanceFromProbeToRayAfter);
      float distanceFromProbeToRay = (minDistFromProbeToRay + maxDistFromProbeToRay) * 0.5;

      vec3 probeSpaceHitPoint = distanceFromProbeToSurface * directionFromProbe;
      float distAlongRay = dot(probeSpaceHitPoint - probeSpaceRay.origin, probeSpaceRay.direction);

      float surfaceThickness = minThickness
          + (maxThickness - minThickness) * max(dot(probeSpaceRay.direction, directionFromProbe), 0.0)
              * (2 - abs(dot(probeSpaceRay.direction, normal))) * clamp(distAlongRay * 0.1, 0.05, 1.0);

      if ((minDistFromProbeToRay < distanceFromProbeToSurface + surfaceThickness)) {
        tMax = distAlongRay;
        hitProbeTexCoord = texCoord;

        return TRACE_RESULT_HIT;
      } else {
        vec3 probeSpaceHitPointBefore = distanceFromProbeToRayBefore * directionFromProbeBefore;
        float distAlongRayBefore = dot(probeSpaceHitPointBefore - probeSpaceRay.origin, probeSpaceRay.direction);
        tMin = max(tMin, min(distAlongRay, distAlongRayBefore));

        return TRACE_RESULT_UNKNOWN;
      }
    }
    distanceFromProbeToRayBefore = distanceFromProbeToRayAfter;
  }

  return TRACE_RESULT_MISS;
}
/**
 * Trace within the probe using low res texture. Return true if there is possible hit.
 */
bool traceSegmentLowRes(in Ray probeSpaceRay, in int probeIndex, inout vec2 texCoord, in vec2 segmentEndTexCoord,
                        inout vec2 endHighResTexCoord) {
  vec2 lowResSize = vec2(TEX_SIZE_SMALL);
  vec2 lowResInvSize = vec2(INV_TEX_SIZE_SMALL);

  vec2 P0 = texCoord * lowResSize;
  vec2 P1 = segmentEndTexCoord * lowResSize;

  P1 += vec2((distanceSquared(P0, P1) < 0.0001) ? 0.01 : 0.0);
  vec2 delta = P1 - P0;

  bool permute = false;
  if (abs(delta.x) < abs(delta.y)) {
    permute = true;
    delta = delta.yx;
    P0 = P0.yx;
    P1 = P1.yx;
  }

  float stepDir = sign(delta.x);
  float invdx = stepDir / delta.x;
  vec2 dP = vec2(stepDir, delta.y * invdx);

  vec3 initialDirectionFromProbe = octDecode(texCoord * 2.0 - 1.0);
  float prevRadialDistMaxEstimate = max(0.0, distanceToIntersection(probeSpaceRay, initialDirectionFromProbe));
  float end = P1.x * stepDir;

  float absInvdPY = 1.0 / abs(dP.y);

  float maxTexCoordDistance = lengthSquared(segmentEndTexCoord - texCoord);

  for (vec2 P = P0; ((P.x * sign(delta.x)) <= end);) {

    vec2 hitPixel = permute ? P.yx : P;

    float sceneRadialDistMin =
        depthFromSmallProbe(floatBitsToUint(imageLoad(probeImagesSmall, ivec3(hitPixel, probeIndex)).x));

    vec2 intersectionPixelDistance = (sign(delta) * 0.5 + 0.5) - sign(delta) * fract(P);

    float rayDistanceToNextPixelEdge = min(intersectionPixelDistance.x, intersectionPixelDistance.y * absInvdPY);

    endHighResTexCoord = (P + dP * rayDistanceToNextPixelEdge) * lowResInvSize;
    endHighResTexCoord = permute ? endHighResTexCoord.yx : endHighResTexCoord;

    if (lengthSquared(endHighResTexCoord - texCoord) > maxTexCoordDistance) { endHighResTexCoord = segmentEndTexCoord; }

    vec3 directionFromProbe = octDecode(endHighResTexCoord * 2.0 - 1.0);
    float distanceFromProbeToRay = max(0.0, distanceToIntersection(probeSpaceRay, directionFromProbe));

    float maxRadialRayDistance = max(distanceFromProbeToRay, prevRadialDistMaxEstimate);
    prevRadialDistMaxEstimate = distanceFromProbeToRay;

    if (sceneRadialDistMin <= maxRadialRayDistance) {
      texCoord = (permute ? P.yx : P) * lowResInvSize;
      return true;
    }

    const float epsilon = 0.001;// pixels
    P += dP * (rayDistanceToNextPixelEdge + epsilon);
  }

  texCoord = segmentEndTexCoord;

  return false;
}
/**
 * Trace within one ray segment over the probe.
 */
TRACE_RESULT traceRaySegment(Ray probeSpaceRay, float t0, float t1, int probeIndex, inout float tMin, inout float tMax,
                             inout vec2 hitCoord) {
  vec3 probeSpaceStartPoint = probeSpaceRay.origin + probeSpaceRay.direction * (t0 + rayBumpEpsilon);
  vec3 probeSpaceEndPoint = probeSpaceRay.origin + probeSpaceRay.direction * (t1 - rayBumpEpsilon);

  if (squaredLength(probeSpaceStartPoint) < 0.001) { probeSpaceStartPoint = probeSpaceRay.direction; }

  vec2 startOctCoord = octEncode(normalize(probeSpaceStartPoint));
  vec2 endOctCoord = octEncode(normalize(probeSpaceEndPoint));

  vec2 texCoord = startOctCoord * 0.5 + 0.5;
  vec2 segmentEndTexCoord = endOctCoord * 0.5 + 0.5;
  while (true) {
    vec2 endTexCoord;
    vec2 originalStartCoord = texCoord;

    if (!traceSegmentLowRes(probeSpaceRay, probeIndex, texCoord, segmentEndTexCoord, endTexCoord)) {
      return TRACE_RESULT_MISS;
    } else {
      TRACE_RESULT traceResult =
          traceSegmentHighRes(probeSpaceRay, texCoord, endTexCoord, probeIndex, tMin, tMax, hitCoord);
      if (traceResult != TRACE_RESULT_MISS) { return traceResult; }
      vec2 texCoordRayDirection = normalize(segmentEndTexCoord - texCoord);
      if (dot(texCoordRayDirection, segmentEndTexCoord - endTexCoord) <= INV_TEX_SIZE.x) {
        return TRACE_RESULT_MISS;
      } else {
        texCoord = endTexCoord + texCoordRayDirection * INV_TEX_SIZE.x * 0.1;
      }
    }
  }
  return TRACE_RESULT_MISS;
}
/**
 * Try and trace ray through the probe.
 */
TRACE_RESULT traceProbe(int probeIndex, Ray ray, inout float tMin, inout float tMax, inout vec2 hitCoord) {
  vec3 probeOrigin = probeLocation(probeIndex);

  Ray probeSpaceRay;
  probeSpaceRay.origin = ray.origin - probeOrigin;
  probeSpaceRay.direction = ray.direction;

  float boundaryTs[5];
  computeRaySegments(probeSpaceRay.origin, vec3(1.0) / probeSpaceRay.direction, tMin, tMax, boundaryTs);

  for (int i = 0; i < 4; ++i) {
    float t0 = boundaryTs[i];
    float t1 = boundaryTs[i + 1];

    TRACE_RESULT traceResult = traceRaySegment(probeSpaceRay, t0, t1, probeIndex, tMin, tMax, hitCoord);
    if (traceResult == TRACE_RESULT_HIT) { return TRACE_RESULT_HIT; }
    if (traceResult == TRACE_RESULT_UNKNOWN) { return TRACE_RESULT_UNKNOWN; }
  }
  return TRACE_RESULT_MISS;
}
/**
 * Check if ray is contained inside the cube.
 */
bool isRayInsideCube(int index, vec3 origin) {
  const vec3 bMin = probeLocation(index);
  const vec3 bMax = bMin + grid.gridStep;
  const vec3 p = origin;

  return bMin.x <= p.x && bMin.y <= p.y && bMin.z <= p.z && bMax.x >= p.x && bMax.y >= p.y && bMax.z >= p.z;
}

/**
 * Render current pixel using probe ray tracing.
 */
void render() {
  ivec2 dimensions = imageSize(debugProbeImage);
  Ray worldSpaceRay;
  const vec2 uv = normalizeScreenCoords(vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec2(dimensions));
  const vec4 nearPlanePos = vec4(uv, 0, 1) * camera.near;
  worldSpaceRay.origin = (camera.invProjView * nearPlanePos).xyz;
  worldSpaceRay.direction = normalize(
      (camera.invProjView * vec4(uv * (camera.far - camera.near), camera.far + camera.near, camera.far - camera.near))
          .xyz);

  if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0) {
    //debugPrintfEXT("%d", nearestProxVoxelIndex(worldSpaceRay.origin));
    //debugPrintfEXT("%d %d %d", proxGridInfo.gridSize.x, proxGridInfo.gridSize.y, proxGridInfo.gridSize.z);
  }

  vec3 probeCoords;
  float tMin = 0;
  float tMax = TMP_FAR;
  vec2 hitCoord;
  bool isUnknown = true;
  int hitProbeIndex = -1;
  bool isMiss = false;

  if (debug.debugInt == 0) {
    uint currentProxIdx = nearestProxVoxelIndexFirst(worldSpaceRay);

    int baseProbeIndex = 0;
    int probeFromProx = getProxProbeIdx(currentProxIdx, 0);
    int probeIndexInCube = 0;
    if (probeFromProx != -1) {
      baseProbeIndex = probeFromProx;
    } else {
      probeIndexInCube = nearestProbeIndices(worldSpaceRay.origin);
    }

    uint cubeCnt = 0;
    uint proxCnt = 0;
    while (true) {
      int probeIndex = relativeProbeIndex(baseProbeIndex, probeIndexInCube);
      TRACE_RESULT traceResult = traceProbe(probeIndex, worldSpaceRay, tMin, tMax, hitCoord);
      if (traceResult != TRACE_RESULT_UNKNOWN) {
        isMiss = traceResult == TRACE_RESULT_MISS;
        if (traceResult == TRACE_RESULT_HIT) { hitProbeIndex = probeIndex; }
        isUnknown = false;
        break;
      }
      const vec3 tmpOrigin = worldSpaceRay.origin + worldSpaceRay.direction * tMin;

      const uint currentlyNearestProxIdx = nearestProxVoxelIndex(tmpOrigin);
      if (currentlyNearestProxIdx == currentProxIdx) {
        if (++cubeCnt == 8) {
          if (++proxCnt < 4) {
            cubeCnt = 0;
            probeFromProx = getProxProbeIdx(currentProxIdx, proxCnt);
            if (probeFromProx != -1) {
              baseProbeIndex = probeFromProx;
              probeIndexInCube = 0;
              continue;
            } else {
              break;
            }
          } else {
            break;
          }
        }
        probeIndexInCube = nextCycleIndex(probeIndexInCube);
      } else {
        cubeCnt = 0;
        proxCnt = 0;
        currentProxIdx = currentlyNearestProxIdx;
        probeFromProx = getProxProbeIdx(currentProxIdx, proxCnt);
        if (probeFromProx != -1) {
          baseProbeIndex = probeFromProx;
          probeIndexInCube = 0;
        } else {
          break;
        }
      }
    }
  } else {

    int baseProbeIndex = nearestProbeIndex(worldSpaceRay.origin, probeCoords);
    int probeIndexInCube = nearestProbeIndices(worldSpaceRay.origin);
    uint cubeCnt = 0;
    bool isMiss = false;
    for (int i = 0; i < grid.gridSize.x * grid.gridSize.y * grid.gridSize.z; ++i) {
      int probeIndex = i;
      TRACE_RESULT traceResult = traceProbe(probeIndex, worldSpaceRay, tMin, tMax, hitCoord);
      if (traceResult != TRACE_RESULT_UNKNOWN) {
        isMiss = traceResult == TRACE_RESULT_MISS;
        if (traceResult == TRACE_RESULT_HIT) {
          hitProbeIndex = probeIndex;
          isUnknown = false;
        }
        break;
      }
    }
  }

  if ((hitProbeIndex == -1) && !isMiss && debug.fillHoles == 1) {
    vec3 ignore;

    uint currentProxIdx = nearestProxVoxelIndex(worldSpaceRay.origin);
    hitProbeIndex = getProxProbeIdx(currentProxIdx, 0);
    if (hitProbeIndex == -1) { hitProbeIndex = nearestProbeIndex(worldSpaceRay.origin, ignore); }
    hitCoord = octEncode(worldSpaceRay.direction) * 0.5 + 0.5;

    float probeDistance =
        depthFromProbe(floatBitsToUint(imageLoad(probeImages, ivec3(hitCoord * TEX_SIZE, hitProbeIndex)).y));

    if (probeDistance < 10000.0) {
      vec3 hitLocation = probeLocation(hitProbeIndex) + worldSpaceRay.direction * probeDistance;
      tMax = length(worldSpaceRay.origin - hitLocation);
    }
  }

  vec3 col;
  if (isMiss) { col = vec3(0, 1, 0); }
  if (hitProbeIndex != -1) {
    uint savedColorBytes = floatBitsToUint(imageLoad(probeImages, ivec3(hitCoord * TEX_SIZE, hitProbeIndex)).x);
    col = vec3(float(savedColorBytes & MASK11) / R_MAX, float((savedColorBytes >> G_SHIFT) & MASK11) / G_MAX,
               float((savedColorBytes >> B_SHIFT) & MASK10) / B_MAX);
  } else if (isUnknown) {
    col = vec3(1, 0, 0);
  }
  imageStore(debugProbeImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(col, 1));
}

void main() {
  ivec3 probeTextureSize = imageSize(probeImages);
  if (gl_GlobalInvocationID.x > probeTextureSize.x || gl_GlobalInvocationID.y > probeTextureSize.y) { return; }

  if (debug.probeVisualType == PROBE_VISUAL_TYPE_DISABLED) { return; }

  if (debug.probeVisualType == PROBE_VISUAL_TYPE_CAMERA_VIEW) {
    render();
    return;
  }

  uint savedColorBytes = floatBitsToUint(
      imageLoad(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, debug.probeToRender)).x);
  const vec3 probeColor =
      vec3(float(savedColorBytes & MASK11) / R_MAX, float((savedColorBytes >> G_SHIFT) & MASK11) / G_MAX,
           float((savedColorBytes >> B_SHIFT) & MASK10) / B_MAX);

  int savedDepthAndNormalBytes = floatBitsToInt(
      imageLoad(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, debug.probeToRender)).y);

  float probeDepth = float(savedDepthAndNormalBytes & DEPTH_MASK) / DEPTH_MAX;

  float probeNormalEncoded1 =
      float((savedDepthAndNormalBytes >> (NORMALS_SHIFT + NORMAL1_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
  float probeNormalEncoded2 =
      float((savedDepthAndNormalBytes >> (NORMALS_SHIFT + NORMAL2_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
  vec3 probeNormal = decodeNormal(vec2(probeNormalEncoded1, probeNormalEncoded2));
  if (debug.probeVisualType == PROBE_VISUAL_TYPE_COLOR) {
    imageStore(debugProbeImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(probeColor, 1));
  } else if (debug.probeVisualType == PROBE_VISUAL_TYPE_NORMALS) {
    imageStore(debugProbeImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y),
               vec4(probeNormal * 0.5f + 0.5f, 1));
  } else if (debug.probeVisualType == PROBE_VISUAL_TYPE_DEPTH) {
    imageStore(debugProbeImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y),
               vec4(probeDepth, probeDepth, probeDepth, 1));
  }
}