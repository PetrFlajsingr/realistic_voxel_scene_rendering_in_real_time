/**
 * A shader to render probe atlas using ESVO ray tracing. It stores indirect lighting, radial depth and normals.
 **/
#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable

#ifndef LOCAL_SIZE_X
#define LOCAL_SIZE_X 8
#endif
#ifndef LOCAL_SIZE_Y
#define LOCAL_SIZE_Y 8
#endif
#ifndef LOCAL_SIZE_Z
#define LOCAL_SIZE_Z 1
#endif

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

/********************************************* CONSTANTS *******************************************/

#define PI 3.141592
#define INF 10000000000000.0
#define EPSILON 0.001

#define SVO_HEADER_SIZE 2

const uint BVH_OFFSET_MASK = 0x7FFFFFFF;
const uint BVH_LEAF_NODE_MASK = ~BVH_OFFSET_MASK;

#define MAX_BOUNCES 40
#define SHADOW 0.35

#define CHILD_PTR_MASK 0xFFFE0000u

#define MAX_RAYCAST_ITERATIONS 10000

const uint MASK11 = 0x7FF;
const uint MASK10 = 0x3FF;
const uint R_MAX = 2047;
const uint G_MAX = 2047;
const uint G_SHIFT = 11;
const uint B_MAX = 1023;
const uint B_SHIFT = 22;

const uint DEPTH_MASK = 0xFFFF;
const uint DEPTH_MAX = 65535;

const uint NORMAL_ELEMENT_MAX = 255;
const uint NORMAL_ELEMENT_MASK = 0xFF;
const uint NORMALS_SHIFT = 16;
const uint NORMAL1_SHIFT = 0;
const uint NORMAL2_SHIFT = 8;

#define TMP_FAR 100.0

/********************************************* ENUMS *******************************************/

#define MATERIAL_TYPE uint
#define MATERIAL_TYPE_DIFFUSE 0
#define MATERIAL_TYPE_METAL 1
#define MATERIAL_TYPE_GLASS 2
#define MATERIAL_TYPE_EMIT 3
#define MATERIAL_TYPE_BLEND 4
#define MATERIAL_TYPE_MEDIA 5
#define MATERIAL_TYPE_CLOUD 6

/********************************************* STRUCTS *******************************************/
/**
 * Model transform, AABB and material info.
 */
struct ModelInfo {
  vec4 scaleAndSvoBufferOffset; /**< .xyz is scale, floatBitsToInt(.w) is offset */
  mat4 objectMatrix;            /**< Transformation matrix */
  mat4 inverseObjectMatrix;     /**< Inverse transform matrix */
  vec4 AABB1;                   /**< xyz is p1.xyz, w is p2.x */
  vec4 AABB2;                   /**< xy is p2.yz */
  ivec4 materialsOffset;        /**< Offset of material data in material buffer */
};
/**
 * A node of BVH tree containing its AABB and children info.
 */
struct BVHNode {
  vec4 AABB1;         /**< p1.xyz, p2.x */
  vec4 AABB2leafNext; /**< p2.yz, 1bit leaf/node, 31 bit child offset/model index */
};
/**
 * Material parameters.
 */
struct Material {
  MATERIAL_TYPE type;
  float metalness;
  float rougness;
  float specular;
  float indexOfRefraction;
  float flux;
  float emission;
  float lowDynamicRange;
  float transparency;
  float alpha;
  float density;
  float red;
  float green;
  float blue;
  float colorAlpha;
};

struct Ray {
  vec3 origin;
  float originSize;
  vec3 direction;
  float directionSize;
};
/**
 * ESVO child descriptor.
 */
struct ChildDescriptor {
  uint data1; /**< Leaf mask 8b, valid mask 8b, unused 16b */
  uint data2; /**< child pointer 32b */
};
/**
 * AABB intersection used for BVH traversal.
 */
struct AABBIntersection_ALT {
  bool hit;       /**< Hit or miss flag */
  float distance; /**< Distance to intersection */
  uint offset;    /**< Offset of child nodes */
  bool isLeaf;    /**< True if the hit node is a leaf */
};
/**
 * ESVO tracing result.
 */
struct TraceResult {
  float distance;             /**< Hit distance in model space */
  float distanceInWorldSpace; /**< Hit distance in world space */
  vec3 pos;                   /**< Hit point position in model space */
  vec3 posInWorldSpace;       /**< Hit point position in world space */
  uint childIdx;              /**< Index of hit node within the parent */
  bool hit;                   /**< Hit or miss flag */
  int iter;                   /**< Count of iterations done in while tracing the ray */
  int stackPtr;               /**< Info about level of hit voxel within octree */
  uint materialId;            /**< ID of hit material. This is an id within this model's material buffer, 
      offset needs to be applied as well */
  vec3 normal;                /**< Normal of hit point */
  bool isOnlyAABB;            /**< True of only AABB has been hit but not a voxel */
  bool aabbHit;               /**< True if aabb has been hit */
  uint objectId;              /**< ID of the hit object */
};

/********************************************* BINDINGS *******************************************/
/**
 * Storage for model SVOs. Offsets for each SVO are saved in model info buffer.
 * Each SVO has an info section, array of child descriptors, array of attachment pointers and an array of attachment descriptors
 */
layout(std430, binding = 0) buffer VoxelSVO_SSBO {
  //uint infoSectionPtr;
  //uint attachmentsPtr;
  //uint childDescriptors[];
  uint data[];// uint infosectionPtr, uint attachmentsPtr, childDescriptors[]
}
svo;
/**
 * Various debug values.
 */
layout(binding = 1, std140) uniform Debug { uint foo; }
debug;
/**
 * Information about models.
 */
layout(std430, binding = 2) buffer SVOModelInfos { ModelInfo infos[]; }
modelInfos;
/**
 * Bounding volume hierarchy used to speed up scene traversal.
 */
layout(std430, binding = 3) buffer BVHModelAABBs { BVHNode nodes[]; }
bvh;
/**
 * Source data for depth, probe image atlas.
 */
layout(binding = 4, rg32f) uniform image2DArray probeImages;
/**
 * Information about probe grid.
 */
layout(binding = 5, std140) uniform Grid {
  ivec4 gridSize; /**< Size of the grid */
  vec4 gridPos;   /**< Start position of the grid */
  float gridStep; /**< Distance between probes */
}
grid;
/**
 * Buffer for all materials. Materials for a certain object can be accessed via materialID and model's offset within this buffer.
 */
layout(std430, binding = 6) buffer Materials { Material data[]; }
materials;

/********************************************* UTIL FUNCTIONS *******************************************/
/**
 * Find max component.
 */
float max(vec2 v) { return max(v.x, v.y); }
/**
 * Find max component.
 */
float max(vec3 v) { return max(max(v.x, v.y), v.z); }
/**
 * Find max component.
 */
float max(vec4 v) { return max(max(max(v.x, v.y), v.z), v.a); }

/**
 * Find min component.
 */
float min(vec2 v) { return min(v.x, v.y); }
/**
 * Find min component.
 */
float min(vec3 v) { return min(min(v.x, v.y), v.z); }
/**
 * Find min component.
 */
float min(vec4 v) { return min(min(min(v.x, v.y), v.z), v.a); }
/**
 * For each component return 1 if it's >= 0, -1 otherwise.
 */
vec2 signNotZero(vec2 v) { return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0); }
/**
 * Octahedron wrap used to encode a normal.
 */
vec2 octahedronWrap(vec2 v) { return (1.0f - abs(v.yx)) * (v.x >= 0.0f && v.y >= 0.f ? 1.0f : -1.0f); }
/**
 * Encode a normal using octahedral projection.
 */
vec2 encodeNormal(vec3 n) {
  n /= (abs(n.x) + abs(n.y) + abs(n.z));
  n.xy = n.z >= 0.0 ? n.xy : octahedronWrap(n.xy);
  n.xy = n.xy * 0.5f + 0.5f;
  return n.xy;
}
/**
 * Decode normal from octahedral projection.
 */
vec3 decodeNormal(vec2 f) {
  f = f * 2.0f - 1.0f;
  vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
  float t = clamp(-n.z, 0.f, 1.f);
  n.x += n.x >= 0.0 ? -t : t;
  n.y += n.y >= 0.0 ? -t : t;
  return normalize(n);
}
/**
 * Decode [-1, 1] coordinates into direction.
 */
vec3 octDecode(vec2 o) {
  vec3 v = vec3(o.x, o.y, 1.0 - abs(o.x) - abs(o.y));
  if (v.z < 0.0) { v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy); }
  return normalize(v);
}
#define LOG_DEPTH_C 1
/**
 * Transform linear depth into logarithmic depth.
 */
float computeLogDepth(float depth) { return log(LOG_DEPTH_C * depth + 1) / log(LOG_DEPTH_C * TMP_FAR + 1); }
/**
 * Transform logarithmic depth into linear depth.
 */
float linearizeLogDepth(float logDepth) { return (pow(LOG_DEPTH_C * TMP_FAR + 1, logDepth) - 1) / LOG_DEPTH_C; }

/********************************************* STACK *******************************************/
#define SVO_STACK_SIZE 23
#define SVO_CAST_STACK_DEPTH SVO_STACK_SIZE
struct SvoStackData {
  int node;
  float tMax;
  uint offset;
};

SvoStackData svoStack[SVO_STACK_SIZE + 1];

#define READ_SVO_STACK(stack, idx) stack[idx]
#define WRITE_SVO_STACK(stack, idx, n, tmax, o)                                                                        \
  stack[idx].node = n;                                                                                                 \
  stack[idx].tMax = tmax;                                                                                              \
  stack[idx].offset = o

#define BVH_STACK_SIZE 23
struct BvhStackData {
  uint node;
};

#define BVH_STACK_SIZE 23
BvhStackData bvhStack[BVH_STACK_SIZE];

#define READ_BVH_STACK(stack, idx) stack[idx].node
#define WRITE_BVH_STACK(stack, idx, n) stack[idx].node = n;

/********************************************* INTERSECTION FUNCTIONS *******************************************/
/**
 * Calculate intersection to an AABB, which is a part of scene's BVH. Additional data are saved in the result for ease of use within a stack.
 */
AABBIntersection_ALT intersectAABBDistance_ALT(Ray ray, vec3 boxMin, vec3 boxMax, uint offset, bool isLeaf) {
  const vec3 tMin = (boxMin - ray.origin) / ray.direction;
  const vec3 tMax = (boxMax - ray.origin) / ray.direction;
  const vec3 t1 = min(tMin, tMax);
  const vec3 t2 = max(tMin, tMax);
  const float tNear = max(max(t1.x, t1.y), t1.z);
  const float tFar = min(min(t2.x, t2.y), t2.z);
  AABBIntersection_ALT result;
  result.hit = tNear > 0.f && tNear < tFar || (tNear < 0.f && tFar > 0.f);
  result.distance = tNear + float(!result.hit) * INF;
  result.offset = offset;
  result.isLeaf = isLeaf;
  return result;
}

/********************************************* TRACING FUNCTIONS *******************************************/
/**
 * Trace a ray through an SVO.
 */
TraceResult trace(Ray ray, uint offsetInSVOBuffer) {
  const float epsilon = exp2(-SVO_CAST_STACK_DEPTH);
  float ray_orig_sz = ray.originSize;
  int iter = 0;

  ray.direction.x = abs(ray.direction.x) > epsilon ? ray.direction.x : (ray.direction.x >= 0 ? epsilon : -epsilon);
  ray.direction.y = abs(ray.direction.y) > epsilon ? ray.direction.y : (ray.direction.y >= 0 ? epsilon : -epsilon);
  ray.direction.z = abs(ray.direction.z) > epsilon ? ray.direction.z : (ray.direction.z >= 0 ? epsilon : -epsilon);

  vec3 distanceCoef = 1.f / -abs(ray.direction);// / 10;

  vec3 distanceBias = distanceCoef * ray.origin;

  int octantMask = 7;
  const float biasCoef = 3.0f;
  if (ray.direction.x > 0.0f) {
    octantMask ^= 1;
    distanceBias.x = biasCoef * distanceCoef.x - distanceBias.x;
  }
  if (ray.direction.y > 0.0f) {
    octantMask ^= 2;
    distanceBias.y = biasCoef * distanceCoef.y - distanceBias.y;
  }
  if (ray.direction.z > 0.0f) {
    octantMask ^= 4;
    distanceBias.z = biasCoef * distanceCoef.z - distanceBias.z;
  }

  float distanceMin = max(2.f * distanceCoef - distanceBias);
  float distanceMax = min(distanceCoef - distanceBias);
  float h = distanceMax;
  distanceMin = max(distanceMin, 0.0f);
  distanceMax = min(distanceMax, 1.0f);

  int parent = 0;
  uint nodeOffset = 0;
  ChildDescriptor childDescriptor = ChildDescriptor(0, 0);// invalid until fetched
  int idx = 0;
  vec3 pos = vec3(1.0f, 1.0f, 1.0f);
  int scale = SVO_CAST_STACK_DEPTH - 1;
  float scaleExp2 = 0.5f;// exp2f(scale - s_max)

  const float posCoef = 1.5f;
  if (posCoef * distanceCoef.x - distanceBias.x > distanceMin) {
    idx ^= 1;
    pos.x = posCoef;
  }
  if (posCoef * distanceCoef.y - distanceBias.y > distanceMin) {
    idx ^= 2;
    pos.y = posCoef;
  }
  if (posCoef * distanceCoef.z - distanceBias.z > distanceMin) {
    idx ^= 4;
    pos.z = posCoef;
  }

  TraceResult res;
  uint hitMaterial;
  bool fetch = true;

  while (scale < SVO_CAST_STACK_DEPTH) {
    iter++;
    if (iter > MAX_RAYCAST_ITERATIONS) break;

    // Fetch child descriptor unless it is already valid.
    if (fetch) {
      childDescriptor.data1 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent];
      childDescriptor.data2 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + 1];
      fetch = false;
    }

    vec3 distanceCorner = pos * distanceCoef - distanceBias;
    float distanceCornerComponentMin = min(distanceCorner);

    int childShift = idx ^ octantMask;// permute child slots based on the mirroring
    uint childMask = childDescriptor.data1 << childShift;
    if ((childMask & 0x8000u) != 0 && distanceMin <= distanceMax) {
      // Terminate if the voxel is small enough.
      //if (distanceCornerComponentMin * ray.directionSize + ray_orig_sz >= scaleExp2) {
      //    color = lut[childShift] * 0.5 + 0.1;
      //    break;// at distanceMin
      //}
      //color = vec3(1, 0, 0);

      // INTERSECT
      // Intersect active t-span with the cube and evaluate
      // tx(), ty(), and tz() at the center of the voxel.

      float tvMax = min(distanceMax, distanceCornerComponentMin);
      float halfScale = scaleExp2 * 0.5f;
      vec3 distanceCenter = halfScale * distanceCoef + distanceCorner;

      if (distanceMin <= tvMax) {
        // Terminate if the corresponding bit in the non-leaf mask is not set.
        if ((childMask & 0x0080u) != 0) {
          childShift = 7 - childShift;
          vec3 norm, distanceCorner = distanceCoef * (pos + scaleExp2) - distanceBias;
          if (distanceCorner.x > distanceCorner.y && distanceCorner.x > distanceCorner.z) {
            norm = vec3(-1, 0, 0);
          } else if (distanceCorner.y > distanceCorner.z) {
            norm = vec3(0, -1, 0);
          } else {
            norm = vec3(0, 0, -1);
          }

          if ((octantMask & 1) == 0u) { norm.x = -norm.x; }
          if ((octantMask & 2) == 0u) { norm.y = -norm.y; }
          if ((octantMask & 4) == 0u) { norm.z = -norm.z; }
          res.normal = norm;

          uint lookupOffset = svo.data[offsetInSVOBuffer];
          uint lookupEntry = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + lookupOffset + nodeOffset];
          uint lookupEntryMask = lookupEntry & 0xFFu;
          uint siblingOffset = bitCount(lookupEntryMask << (8 - childShift) & 0xFFu);
          uint attPtr = lookupEntry >> 8u & 0xFFFFFFu;
          attPtr += siblingOffset + svo.data[offsetInSVOBuffer + 1];
          //uint phongAttrib = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + attPtr];
          //color = vec3((phongAttrib >> 24u & 0xFFu) / 255.f, (phongAttrib >> 16u & 0xFFu) / 255.f,
          //             (phongAttrib >> 8 & 0xFFu) / 255.f);
          hitMaterial = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + attPtr];
          //color = lut[childShift] * 0.5f + 0.5f;

          //if ((lookupEntry & 0xFFu) != 0) {
          //    color = RED;
          //} else {
          //    color = BLUE;
          //}

          break;// at distanceMin (overridden with tv_min).
        }

        // PUSH
        // Write current parent to the stack.

        if (distanceCornerComponentMin < h) { WRITE_SVO_STACK(svoStack, scale, parent, distanceMax, nodeOffset); }
        h = distanceCornerComponentMin;

        // Find child descriptor corresponding to the current voxel.

        //uint ptr = childDescriptor.data1 >> 16u;// child pointer
        uint ptr = childDescriptor.data2;// child pointer

        /* if ((childDescriptor.childData & 0x10000) != 0) { // FAR
                          ptr = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + int(ptr * 2)];
                        }*/

        uint validMask = (childDescriptor.data1 >> 8u) & 0xFFu;
        uint leafMask = childDescriptor.data1 & 0xFFu;

        childShift = 7 - childShift;

        validMask = validMask << (8 - childShift) & 0xFFu;
        leafMask = leafMask << (8 - childShift) & 0xFFu;

        uint ofs = bitCount(validMask) - bitCount(leafMask);

        //color = lut[ofs] * 0.5 + 0.3;
        uint offsetFromParent = ptr + ofs;
        nodeOffset = parent / 2 + offsetFromParent;
        parent = parent + int(offsetFromParent * 2);

        // Select child voxel that the ray enters first.

        idx = 0;
        scale--;
        scaleExp2 = halfScale;

        if (distanceCenter.x > distanceMin) {
          idx ^= 1;
          pos.x += scaleExp2;
        }
        if (distanceCenter.y > distanceMin) {
          idx ^= 2;
          pos.y += scaleExp2;
        }
        if (distanceCenter.z > distanceMin) {
          idx ^= 4;
          pos.z += scaleExp2;
        }

        // Update active t-span and invalidate cached child descriptor.

        distanceMax = tvMax;
        //childDescriptor.childData = 0;
        fetch = true;
        continue;
      }
    }

    // ADVANCE
    // Step along the ray.
    int stepMask = 0;
    if (distanceCorner.x <= distanceCornerComponentMin) {
      stepMask ^= 1;
      pos.x -= scaleExp2;
    }
    if (distanceCorner.y <= distanceCornerComponentMin) {
      stepMask ^= 2;
      pos.y -= scaleExp2;
    }
    if (distanceCorner.z <= distanceCornerComponentMin) {
      stepMask ^= 4;
      pos.z -= scaleExp2;
    }

    // Update active t-span and flip bits of the child slot index.

    distanceMin = distanceCornerComponentMin;
    idx ^= stepMask;

    // Proceed with pop if the bit flips disagree with the ray direction.

    if ((idx & stepMask) != 0) {
      // POP
      // Find the highest differing bit between the two positions.

      uint differingBits = 0;
      if ((stepMask & 1) != 0) differingBits |= floatBitsToInt(pos.x) ^ floatBitsToInt(pos.x + scaleExp2);
      if ((stepMask & 2) != 0) differingBits |= floatBitsToInt(pos.y) ^ floatBitsToInt(pos.y + scaleExp2);
      if ((stepMask & 4) != 0) differingBits |= floatBitsToInt(pos.z) ^ floatBitsToInt(pos.z + scaleExp2);
      scale = findMSB(differingBits);                                        // position of the highest bit
      scaleExp2 = intBitsToFloat((scale - SVO_CAST_STACK_DEPTH + 127) << 23);// exp2f(scale - s_max)

      // Restore parent voxel from the stack.

      parent = READ_SVO_STACK(svoStack, scale).node;
      distanceMax = READ_SVO_STACK(svoStack, scale).tMax;
      nodeOffset = READ_SVO_STACK(svoStack, scale).offset;

      // Round cube position and extract child slot index.

      int shx = floatBitsToInt(pos.x) >> scale;
      int shy = floatBitsToInt(pos.y) >> scale;
      int shz = floatBitsToInt(pos.z) >> scale;
      pos.x = intBitsToFloat(shx << scale);
      pos.y = intBitsToFloat(shy << scale);
      pos.z = intBitsToFloat(shz << scale);
      idx = (shx & 1) | ((shy & 1) << 1) | ((shz & 1) << 2);

      // Prevent same parent from being stored again and invalidate cached child descriptor.

      h = 0.0f;
      //childDescriptor.childData = 0;
      fetch = true;
    }
  }

  if (scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS) { distanceMin = 2.0f; }

  // Undo mirroring of the coordinate system.

  if ((octantMask & 1) == 0) pos.x = 3.0f - scaleExp2 - pos.x;
  if ((octantMask & 2) == 0) pos.y = 3.0f - scaleExp2 - pos.y;
  if ((octantMask & 4) == 0) pos.z = 3.0f - scaleExp2 - pos.z;

  // Output results.

  res.iter = iter;
  res.pos.x = min(max(ray.origin.x + distanceMin * ray.direction.x, pos.x + epsilon), pos.x + scaleExp2 - epsilon);
  res.pos.y = min(max(ray.origin.y + distanceMin * ray.direction.y, pos.y + epsilon), pos.y + scaleExp2 - epsilon);
  res.pos.z = min(max(ray.origin.z + distanceMin * ray.direction.z, pos.z + epsilon), pos.z + scaleExp2 - epsilon);
  res.childIdx = idx ^ octantMask ^ 7;
  res.stackPtr = scale;
  res.materialId = hitMaterial;
  res.hit = !(scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS);
  return res;
}
/**
 * Transform a ray into an object space and trace its SVO.
 */
TraceResult traceModel(uint modelIndex, Ray ray) {
  ray.origin = (modelInfos.infos[modelIndex].inverseObjectMatrix * vec4(ray.origin, 1)).xyz;
  ray.direction =                                                                                //normalize(
      (transpose(modelInfos.infos[modelIndex].inverseObjectMatrix) * vec4(ray.direction, 0)).xyz;//);
  ray.originSize = 0.02;
  ray.directionSize = 0;
  TraceResult result;
  result.objectId = modelIndex;
  result.hit = false;
  result.iter = 0;

  ray.origin += vec3(1, 1, 1);

  result = trace(ray, floatBitsToUint(modelInfos.infos[modelIndex].scaleAndSvoBufferOffset.w));
  result.materialId += modelInfos.infos[modelIndex].materialsOffset.x;
  result.objectId = modelIndex;

  return result;
}

#define IS_BVH_NODE_LEAF(node) ((floatBitsToUint(node.AABB2leafNext.z) & BVH_LEAF_NODE_MASK) != 0)
#define GET_BVH_NODE_OFFSET(node) (floatBitsToUint(node.AABB2leafNext.z) & BVH_OFFSET_MASK)
#define GET_BVH_MIN_AABB(node) node.AABB1.xyz
#define GET_BVH_MAX_AABB(node) vec3(node.AABB1.w, node.AABB2leafNext.xy)

#define READ_BVH_STACK_ALT(stack, idx) stack[idx]
#define WRITE_BVH_STACK_ALT(stack, idx, n) stack[idx] = n;

AABBIntersection_ALT bvhStack_ALT[BVH_STACK_SIZE];
/**
 * Trace a ray through a BVH. If there is a hit trace within an SVO.
 */
TraceResult traceBVHImproved(Ray ray, uint idx, uint idy) {
  Ray aabbRay = ray;
  aabbRay.direction = normalize(aabbRay.direction);

  TraceResult result;
  result.hit = false;
  result.isOnlyAABB = true;
  result.iter = 0;
  result.normal = vec3(0);

  TraceResult bestModelResult;
  bestModelResult.hit = false;
  bestModelResult.iter = 0;
  bestModelResult.distanceInWorldSpace = INF;

  uint stackTop = 0;

  // BVH root
  uint nodeToCheckIdx = 0;
  BVHNode currentNode = bvh.nodes[nodeToCheckIdx];
  vec3 boxMin = GET_BVH_MIN_AABB(currentNode);
  vec3 boxMax = GET_BVH_MAX_AABB(currentNode);
  uint offset = GET_BVH_NODE_OFFSET(currentNode);
  AABBIntersection_ALT intersectionA =
      intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

  while (intersectionA.hit) {
    while (!intersectionA.isLeaf && intersectionA.hit) {
      nodeToCheckIdx = intersectionA.offset + 1;
      currentNode = bvh.nodes[nodeToCheckIdx];
      boxMin = GET_BVH_MIN_AABB(currentNode);
      boxMax = GET_BVH_MAX_AABB(currentNode);
      offset = GET_BVH_NODE_OFFSET(currentNode);
      AABBIntersection_ALT intersectionB =
          intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

      nodeToCheckIdx = intersectionA.offset;
      currentNode = bvh.nodes[nodeToCheckIdx];
      boxMin = GET_BVH_MIN_AABB(currentNode);
      boxMax = GET_BVH_MAX_AABB(currentNode);
      offset = GET_BVH_NODE_OFFSET(currentNode);
      intersectionA = intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

      // sort child nodes
      if (intersectionB.distance < intersectionA.distance) {
        AABBIntersection_ALT tmp = intersectionB;
        intersectionB = intersectionA;
        intersectionA = tmp;
      }
      // B is present only if both children have been hit, push it onto stack - if it's further away than the closest intersected model skip it
      if (intersectionB.hit && intersectionB.distance < bestModelResult.distanceInWorldSpace) {
        WRITE_BVH_STACK_ALT(bvhStack_ALT, stackTop++, intersectionB);
      }
      // there was no hit, read stack
      if (!intersectionA.hit && stackTop > 0) { intersectionA = READ_BVH_STACK_ALT(bvhStack_ALT, --stackTop); }
    }
    if (intersectionA.isLeaf && intersectionA.hit) {
      if (intersectionA.distance < bestModelResult.distanceInWorldSpace) {
        TraceResult modelTraceResult = traceModel(intersectionA.offset, ray);
        modelTraceResult.posInWorldSpace =
            (modelInfos.infos[modelTraceResult.objectId].objectMatrix * vec4(modelTraceResult.pos - vec3(1, 1, 1), 1))
                .xyz;
        modelTraceResult.distanceInWorldSpace = distance(ray.origin, modelTraceResult.posInWorldSpace);
        if (modelTraceResult.hit && modelTraceResult.distanceInWorldSpace < bestModelResult.distanceInWorldSpace) {
          bestModelResult = modelTraceResult;
        }
        result.iter += modelTraceResult.iter;
      }

      // stack is empty, end
      if (stackTop == 0) {
        intersectionA.hit = false;
      } else {// read stack
        intersectionA = READ_BVH_STACK_ALT(bvhStack_ALT, --stackTop);
      }
    }
  }

  if (bestModelResult.hit) {
    bestModelResult.normal = normalize(
        (transpose(modelInfos.infos[bestModelResult.objectId].objectMatrix) * vec4(bestModelResult.normal, 0)).xyz);
    bestModelResult.iter = result.iter;
    return bestModelResult;
  }
  return result;
}

/**
 * Generate a uniformly distributed random point on the unit-sphere.
 * 
 * After:
 * http://mathworld.wolfram.com/SpherePointPicking.html
 */
vec3 randomSpherePoint(vec3 rand) {
  float ang1 = (rand.x + 1.0) * PI;// [-1..1) -> [0..2*PI)
  float u = rand.y;                // [-1..1), cos and acos(2v-1) cancel each other out, so we arrive at [-1..1)
  float u2 = u * u;
  float sqrt1MinusU2 = sqrt(1.0 - u2);
  float x = sqrt1MinusU2 * cos(ang1);
  float y = sqrt1MinusU2 * sin(ang1);
  float z = u;
  return vec3(x, y, z);
}

/**
 * Generate a uniformly distributed random point on the unit-hemisphere
 * around the given normal vector.
 * 
 * This function can be used to generate reflected rays for diffuse surfaces.
 * Actually, this function can be used to sample reflected rays for ANY surface
 * with an arbitrary BRDF correctly.
 * This is because we always need to solve the integral over the hemisphere of
 * a surface point by using numerical approximation using a sum of many
 * sample directions.
 * It is only with non-lambertian BRDF's that, in theory, we could sample them more
 * efficiently, if we knew in which direction the BRDF reflects the most energy.
 * This would be importance sampling, but care must be taken as to not over-estimate
 * those surfaces, because then our sum for the integral would be greater than the
 * integral itself. This is the inherent problem with importance sampling.
 * 
 * The points are uniform over the sphere and NOT over the projected disk
 * of the sphere, so this function cannot be used when sampling a spherical
 * light, where we need to sample the projected surface of the light (i.e. disk)!
 */
vec3 randomHemispherePoint(vec3 rand, vec3 n) {
  /**
     * Generate random sphere point and swap vector along the normal, if it
     * points to the wrong of the two hemispheres.
     * This method provides a uniform distribution over the hemisphere,
     * provided that the sphere distribution is also uniform.
     */
  vec3 v = randomSpherePoint(rand);
  return -normalize(v * sign(dot(v, n)));
}
/**
 * Generate a pseud-random value based on co.
 */
float drand48(vec2 co) { return 2 * fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453) - 1; }
/********************************************* PROBE FUNCTIONS *******************************************/
/**
 * Calculate probe grid coordinate using its index.
 */
ivec3 probeIndexToGridCoord(uint probeIndex) {
  return ivec3(probeIndex & (grid.gridSize.x - 1),
               (probeIndex & ((grid.gridSize.x * grid.gridSize.y) - 1)) >> findMSB(grid.gridSize.x),
               probeIndex >> findMSB(grid.gridSize.x * grid.gridSize.y));
}
/**
 * Convert probe's grid coordinate to world coordinate.
 */
vec3 gridCoordToProbeGoord(ivec3 gridCoord) { return grid.gridStep * gridCoord + grid.gridPos.xyz; }
/**
 * Calculate probe's index to its world coordinate.
 */
vec3 probeIndexToProbeCoord(uint probeIndex) { return gridCoordToProbeGoord(probeIndexToGridCoord(probeIndex)); }

#define MAX_BOUNCES2 5
#define HIHI 0.001
/**
 * Calculate indirect lighting for ray.
 */
vec3 calculateIndirectLighting(Ray ray, float diffuseBounceAtt, vec3 seed) {
  TraceResult traceResult;
  vec3 col = vec3(1, 1, 1);
  bool isDone = false;
  uint i;
  for (i = 0; i < MAX_BOUNCES2; ++i) {
    traceResult = traceBVHImproved(ray, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    if (!traceResult.hit) { break; }
    const Material material =
        materials.data[modelInfos.infos[traceResult.objectId].materialsOffset.x + traceResult.materialId];
    vec3 previousHitPoint = ray.origin;
    vec3 hitPoint = traceResult.posInWorldSpace;
    const vec3 normal = traceResult.normal;
    switch (material.type) {
      case MATERIAL_TYPE_GLASS:
      case MATERIAL_TYPE_DIFFUSE: {
        const vec3 random = vec3(drand48(hitPoint.xy + seed.xy + i), drand48(hitPoint.yz + seed.yz + i),
                                 drand48(hitPoint.xz + seed.xz + i));
        ray.direction = randomHemispherePoint(random, normal);
        ray.origin = hitPoint + ray.direction * HIHI;
        ray.direction *= TMP_FAR;
        col *= diffuseBounceAtt;
        break;
      }
      case MATERIAL_TYPE_METAL: {
        const float rougness = material.rougness;
        const float indexOfRefraction = material.indexOfRefraction;
        const float metalness = material.metalness;
        ray.direction = reflect(ray.direction, normal);
        ray.origin = hitPoint + ray.direction * HIHI;
        ray.direction *= TMP_FAR;
        const vec3 matColor = vec3(material.red, material.green, material.blue);
        col = mix(matColor, col, metalness);
        break;
      }
      case MATERIAL_TYPE_EMIT: {
        const float ldr = material.lowDynamicRange;
        const float emission = material.emission;
        const float flux = material.flux;
        const vec3 matColor = vec3(material.red, material.green, material.blue);
        col = mix(col, matColor, emission * flux);
        isDone = true;
        break;
      }
    }
    if (isDone) { break; }
  }
  return col;
}
/**
 * Calculate indirect lighting on point using rayCnt rays.
 */
vec3 calcDiffuseIndirectN(vec3 hitPoint, vec3 normal, float diffuseBounceAtt, uint rayCnt) {
  vec3 result = vec3(0, 0, 0);
  for (uint i = 0; i < rayCnt; ++i) {
    Ray ray;
    const vec3 random = vec3(drand48(hitPoint.xy + i), drand48(hitPoint.yz + i), drand48(hitPoint.xz + i));
    ray.direction = randomHemispherePoint(random, normal);
    ray.origin = hitPoint + ray.direction * HIHI;
    ray.direction *= TMP_FAR;
    result += calculateIndirectLighting(ray, diffuseBounceAtt, vec3(i, i, i));
  }
  return result / rayCnt;
}
/**
 * Encode and save data into probe atlas.
 */
void saveAtlasData(vec3 indirect, vec3 normal, float depth) {
  const float indirectBytes = uintBitsToFloat(uint(indirect.r * R_MAX) | (uint(indirect.g * G_MAX) << G_SHIFT)
                                              | (uint(indirect.b * B_MAX) << B_SHIFT));

  const vec2 encodedNormal = encodeNormal(normal);
  const int encodedBitNormal1 = int(encodedNormal.x * NORMAL_ELEMENT_MAX);
  const int encodedBitNormal2 = int(encodedNormal.y * NORMAL_ELEMENT_MAX);
  const int encodedBitNormal = (encodedBitNormal1 << NORMAL1_SHIFT) | (encodedBitNormal2 << NORMAL2_SHIFT);

  const float depthAndNormalBytes = uintBitsToFloat(uint(depth * DEPTH_MAX) | (encodedBitNormal << NORMALS_SHIFT));

  const vec2 probeData = vec2(indirectBytes, depthAndNormalBytes);

  //imageStore(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z),
  imageStore(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, debug.foo), vec4(probeData, 0, 0));
}

void main() {
  ivec3 probeTextureSize = imageSize(probeImages);
  if (gl_GlobalInvocationID.x > probeTextureSize.x || gl_GlobalInvocationID.y > probeTextureSize.y
      || gl_GlobalInvocationID.z > probeTextureSize.z) {
    return;
  }

  //const uint probeId = gl_GlobalInvocationID.z;
  const uint probeId = debug.foo;

  vec2 normalisedOctCoords = (vec2(gl_GlobalInvocationID.xy) - 512.0) / 512.0;
  vec3 v = octDecode(normalisedOctCoords);

  Ray probeRay;
  probeRay.origin = probeIndexToProbeCoord(probeId);
  probeRay.direction = v * TMP_FAR;

  TraceResult traceResult;
  traceResult.hit = false;
  traceResult.iter = 0;

  vec3 col = vec3(1, 1, 1);
  float diffuseBounceAtt = 0.8;
  bool isDone = false;
  bool isHit = false;
  float hitDepth = TMP_FAR;
  vec3 firstHitNormal;
  traceResult = traceBVHImproved(probeRay, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  if (traceResult.hit) {
    hitDepth = traceResult.distanceInWorldSpace;
    firstHitNormal = traceResult.normal;
    isHit = true;
    const Material material =
        materials.data[modelInfos.infos[traceResult.objectId].materialsOffset.x + traceResult.materialId];
    vec3 hitColor = vec3(material.red, material.green, material.blue);
    vec3 hitPoint = traceResult.posInWorldSpace;
    const vec3 normal = traceResult.normal;
    switch (material.type) {
      case MATERIAL_TYPE_METAL:
      case MATERIAL_TYPE_GLASS:
      case MATERIAL_TYPE_DIFFUSE: {
        col = calcDiffuseIndirectN(hitPoint, normal, 0.6, 64);
        break;
      }
      case MATERIAL_TYPE_EMIT: {
        col = hitColor;
        break;
      }
    }
  }
  vec3 indirect = col;

  const vec3 normal = isHit ? firstHitNormal : vec3(0);
  const float depth = computeLogDepth(isHit ? hitDepth : TMP_FAR);

  saveAtlasData(indirect, normal, depth);
}