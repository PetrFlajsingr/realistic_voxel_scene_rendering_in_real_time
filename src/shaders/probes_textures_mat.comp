/**
 * A shader to render probe atlas using ESVO ray tracing. It stores color, radial depth and normals.
 **/
#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable

#ifndef LOCAL_SIZE_X
#define LOCAL_SIZE_X 8
#endif
#ifndef LOCAL_SIZE_Y
#define LOCAL_SIZE_Y 8
#endif
#ifndef LOCAL_SIZE_Z
#define LOCAL_SIZE_Z 1
#endif

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

/********************************************* CONSTANTS *******************************************/

#define PI 3.141592
#define INF 10000000000000.0
#define EPSILON 0.001

#define SVO_HEADER_SIZE 2

const uint BVH_OFFSET_MASK = 0x7FFFFFFF;
const uint BVH_LEAF_NODE_MASK = ~BVH_OFFSET_MASK;

#define MAX_BOUNCES 40
#define SHADOW 0.35

#define CHILD_PTR_MASK 0xFFFE0000u

const vec3 lut[8] = vec3[8](vec3(0, 0, 0), // 0
vec3(1, 0, 0), // 1
vec3(0, 1, 0), // 2
vec3(1, 1, 0), // 3
vec3(0, 0, 1), // 4
vec3(1, 0, 1), // 5
vec3(0, 1, 1), // 6
vec3(1, 1, 1)// 7
);

#define MAX_RAYCAST_ITERATIONS 10000

const uint MASK11 = 0x7FF;
const uint MASK10 = 0x3FF;
const uint R_MAX = 2047;
const uint G_MAX = 2047;
const uint G_SHIFT = 11;
const uint B_MAX = 1023;
const uint B_SHIFT = 22;

const uint DEPTH_MASK = 0xFFFF;
const uint DEPTH_MAX = 65535;

const uint NORMAL_ELEMENT_MAX = 255;
const uint NORMAL_ELEMENT_MASK = 0xFF;
const uint NORMALS_SHIFT = 16;
const uint NORMAL1_SHIFT = 0;
const uint NORMAL2_SHIFT = 8;

#define TMP_FAR 100.0

/********************************************* ENUMS *******************************************/

#define MATERIAL_TYPE uint
#define MATERIAL_TYPE_DIFFUSE 0
#define MATERIAL_TYPE_METAL 1
#define MATERIAL_TYPE_GLASS 2
#define MATERIAL_TYPE_EMIT 3
#define MATERIAL_TYPE_BLEND 4
#define MATERIAL_TYPE_MEDIA 5
#define MATERIAL_TYPE_CLOUD 6

/********************************************* STRUCTS *******************************************/

struct ModelInfo {
    vec4 scaleAndSvoBufferOffset;// .xyz is scale, floatBitsToInt(.w) is offset
    mat4 objectMatrix;
    mat4 inverseObjectMatrix;
    vec4 AABB1;// xyz is p1.xyz, w is p2.x
    vec4 AABB2;// xy is p2.yz
    ivec4 materialsOffset;
};

struct BVHNode {
    vec4 AABB1;// p1.xyz, p2.x
    vec4 AABB2leafNext;// p2.yz, 1bit leaf/node, 31 bit child offset/model index
};

struct Material {
MATERIAL_TYPE type;
    float metalness;
    float rougness;
    float specular;
    float indexOfRefraction;
    float flux;
    float emission;
    float lowDynamicRange;
    float transparency;
    float alpha;
    float density;
    float red;
    float green;
    float blue;
    float colorAlpha;
};

struct Ray {
    vec3 origin;
    float originSize;
    vec3 direction;
    float directionSize;
};

struct ChildDescriptor {
    uint data1;
    uint data2;
};

struct AABBIntersection_ALT {
    bool hit;
    float distance;
    uint offset;
    bool isLeaf;
};

struct BoundingBox {
    vec3 p1;
    vec3 p2;
};

struct Box {
    vec3 pos;
    float sideLen;
};

struct Sphere {
    vec3 position;
    float radius;
};

struct TraceResult {
    float distance;
    float distanceInWorldSpace;
    vec3 pos;
    vec3 posInWorldSpace;
    uint node;
    uint childIdx;
    bool hit;
    float t;
    int iter;
    int stackPtr;
    uint materialId;
    vec3 normal;
    bool isOnlyAABB;
    uint objectId;
};

Sphere LFP_SPHERE = Sphere(vec3(0, 0, 0), 0.01);

/********************************************* BINDINGS *******************************************/

layout(std430, binding = 0) buffer VoxelSVO_SSBO {
//uint infoSectionPtr;
//uint attachmentsPtr;
//uint childDescriptors[];
    uint data[];// uint infosectionPtr, uint attachmentsPtr, childDescriptors[]
}
svo;
layout(binding = 1, std140) uniform Debug { uint foo; }
debug;

layout(std430, binding = 2) buffer SVOModelInfos { ModelInfo infos[]; }
modelInfos;
layout(std430, binding = 3) buffer BVHModelAABBs { BVHNode nodes[]; }
bvh;

layout(binding = 4, rg32f) uniform image2DArray probeImages;

layout(binding = 5, std140) uniform Grid {
    ivec4 gridSize;
    vec4 gridPos;
    float gridStep;
}
grid;

layout(std430, binding = 6) buffer Materials { Material data[]; }
materials;

/********************************************* UTIL FUNCTIONS *******************************************/

float max(vec2 v) { return max(v.x, v.y); }
float max(vec3 v) { return max(max(v.x, v.y), v.z); }
float max(vec4 v) { return max(max(max(v.x, v.y), v.z), v.a); }

float min(vec2 v) { return min(v.x, v.y); }
float min(vec3 v) { return min(min(v.x, v.y), v.z); }
float min(vec4 v) { return min(min(min(v.x, v.y), v.z), v.a); }

vec2 signNotZero(vec2 v) { return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0); }

vec2 octahedronWrap(vec2 v) { return (1.0f - abs(v.yx)) * (v.x >= 0.0f && v.y >= 0.f ? 1.0f : -1.0f); }

vec2 encodeNormal(vec3 n) {
    n /= (abs(n.x) + abs(n.y) + abs(n.z));
    n.xy = n.z >= 0.0 ? n.xy : octahedronWrap(n.xy);
    n.xy = n.xy * 0.5f + 0.5f;
    return n.xy;
}

vec3 decodeNormal(vec2 f) {
    f = f * 2.0f - 1.0f;
    vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
    float t = clamp(-n.z, 0.f, 1.f);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize(n);
}

vec3 octDecode(vec2 o) {
    vec3 v = vec3(o.x, o.y, 1.0 - abs(o.x) - abs(o.y));
    if (v.z < 0.0) { v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy); }
    return normalize(v);
}

    #define LOG_DEPTH_C 1
float computeLogDepth(float depth) { return log(LOG_DEPTH_C * depth + 1) / log(LOG_DEPTH_C * TMP_FAR + 1); }
float linearizeLogDepth(float logDepth) { return (pow(LOG_DEPTH_C * TMP_FAR + 1, logDepth) - 1) / LOG_DEPTH_C; }

    /********************************************* STACK *******************************************/
    #define SVO_STACK_SIZE 23
    #define SVO_CAST_STACK_DEPTH SVO_STACK_SIZE
struct SvoStackData {
    int node;
    float tMax;
    uint offset;
};

SvoStackData svoStack[SVO_STACK_SIZE + 1];

#define READ_SVO_STACK(stack, idx) stack[idx]
#define WRITE_SVO_STACK(stack, idx, n, tmax, o)                                                                        \
  stack[idx].node = n;                                                                                                 \
  stack[idx].tMax = tmax;                                                                                              \
  stack[idx].offset = o

#define BVH_STACK_SIZE 23
struct BvhStackData {
    uint node;
};

#define BVH_STACK_SIZE 23
BvhStackData bvhStack[BVH_STACK_SIZE];

#define READ_BVH_STACK(stack, idx) stack[idx].node
#define WRITE_BVH_STACK(stack, idx, n) stack[idx].node = n;

/********************************************* INTERSECTION FUNCTIONS *******************************************/

AABBIntersection_ALT intersectAABBDistance_ALT(Ray ray, vec3 boxMin, vec3 boxMax, uint offset, bool isLeaf) {
    const vec3 tMin = (boxMin - ray.origin) / ray.direction;
    const vec3 tMax = (boxMax - ray.origin) / ray.direction;
    const vec3 t1 = min(tMin, tMax);
    const vec3 t2 = max(tMin, tMax);
    const float tNear = max(max(t1.x, t1.y), t1.z);
    const float tFar = min(min(t2.x, t2.y), t2.z);
    AABBIntersection_ALT result;
    result.hit = tNear > 0.f && tNear < tFar || (tNear < 0.f && tFar > 0.f);
    result.distance = tNear + float(!result.hit) * INF;
    result.offset = offset;
    result.isLeaf = isLeaf;
    return result;
}

/********************************************* TRACING FUNCTIONS *******************************************/

TraceResult trace(Ray ray, uint offsetInSVOBuffer, uint offsetInMaterialBuffer) {
    const float epsilon = exp2(-SVO_CAST_STACK_DEPTH);
    float ray_orig_sz = ray.originSize;
    int iter = 0;

    ray.direction.x = abs(ray.direction.x) > epsilon ? ray.direction.x : (ray.direction.x >= 0 ? epsilon : -epsilon);
    ray.direction.y = abs(ray.direction.y) > epsilon ? ray.direction.y : (ray.direction.y >= 0 ? epsilon : -epsilon);
    ray.direction.z = abs(ray.direction.z) > epsilon ? ray.direction.z : (ray.direction.z >= 0 ? epsilon : -epsilon);

    vec3 t_coef = 1.f / -abs(ray.direction);// / 10;

    vec3 t_bias = t_coef * ray.origin;

    int octant_mask = 7;
    const float biasCoef = 3.0f;
    if (ray.direction.x > 0.0f) {
        octant_mask ^= 1;
        t_bias.x = biasCoef * t_coef.x - t_bias.x;
    }
    if (ray.direction.y > 0.0f) {
        octant_mask ^= 2;
        t_bias.y = biasCoef * t_coef.y - t_bias.y;
    }
    if (ray.direction.z > 0.0f) {
        octant_mask ^= 4;
        t_bias.z = biasCoef * t_coef.z - t_bias.z;
    }

    float t_min = max(2.f * t_coef - t_bias);
    float t_max = min(t_coef - t_bias);
    float h = t_max;
    t_min = max(t_min, 0.0f);
    t_max = min(t_max, 1.0f);

    int parent = 0;
    uint nodeOffset = 0;
    ChildDescriptor child_descriptor = ChildDescriptor(0, 0);// invalid until fetched
    int idx = 0;
    vec3 pos = vec3(1.0f, 1.0f, 1.0f);
    int scale = SVO_CAST_STACK_DEPTH - 1;
    float scale_exp2 = 0.5f;// exp2f(scale - s_max)

    const float posCoef = 1.5f;
    if (posCoef * t_coef.x - t_bias.x > t_min) {
        idx ^= 1;
        pos.x = posCoef;
    }
    if (posCoef * t_coef.y - t_bias.y > t_min) {
        idx ^= 2;
        pos.y = posCoef;
    }
    if (posCoef * t_coef.z - t_bias.z > t_min) {
        idx ^= 4;
        pos.z = posCoef;
    }

    TraceResult res;
    uint hitMaterial;
    bool fetch = true;

    while (scale < SVO_CAST_STACK_DEPTH) {
        iter++;
        if (iter > MAX_RAYCAST_ITERATIONS) break;

        // Fetch child descriptor unless it is already valid.

        //if (child_descriptor.childData == 0)
        if (fetch) {
            child_descriptor.data1 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent];
            child_descriptor.data2 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + 1];
            fetch = false;
        }

        vec3 t_corner = pos * t_coef - t_bias;
        float tc_max = min(t_corner);

        int child_shift = idx ^ octant_mask;// permute child slots based on the mirroring
        uint child_masks = child_descriptor.data1 << child_shift;
        if ((child_masks & 0x8000u) != 0 && t_min <= t_max) {
            // Terminate if the voxel is small enough.
            //if (tc_max * ray.directionSize + ray_orig_sz >= scale_exp2) {
            //    color = lut[child_shift] * 0.5 + 0.1;
            //    break;// at t_min
            //}
            //color = vec3(1, 0, 0);

            // INTERSECT
            // Intersect active t-span with the cube and evaluate
            // tx(), ty(), and tz() at the center of the voxel.

            float tv_max = min(t_max, tc_max);
            float halfScale = scale_exp2 * 0.5f;
            vec3 t_center = halfScale * t_coef + t_corner;

            if (t_min <= tv_max) {
                // Terminate if the corresponding bit in the non-leaf mask is not set.
                if ((child_masks & 0x0080u) != 0) {
                    child_shift = 7 - child_shift;
                    vec3 norm, t_corner = t_coef * (pos + scale_exp2) - t_bias;
                    if (t_corner.x > t_corner.y && t_corner.x > t_corner.z) {
                        norm = vec3(-1, 0, 0);
                    } else if (t_corner.y > t_corner.z) {
                        norm = vec3(0, -1, 0);
                    } else {
                        norm = vec3(0, 0, -1);
                    }

                    if ((octant_mask & 1) == 0u) { norm.x = -norm.x; }
                    if ((octant_mask & 2) == 0u) { norm.y = -norm.y; }
                    if ((octant_mask & 4) == 0u) { norm.z = -norm.z; }
                    res.normal = norm;

                    uint lookupOffset = svo.data[offsetInSVOBuffer];
                    uint lookupEntry = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + lookupOffset + nodeOffset];
                    uint lookupEntryMask = lookupEntry & 0xFFu;
                    uint siblingOffset = bitCount(lookupEntryMask << (8 - child_shift) & 0xFFu);
                    uint attPtr = lookupEntry >> 8u & 0xFFFFFFu;
                    attPtr += siblingOffset + svo.data[offsetInSVOBuffer + 1];
                    //uint phongAttrib = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + attPtr];
                    //color = vec3((phongAttrib >> 24u & 0xFFu) / 255.f, (phongAttrib >> 16u & 0xFFu) / 255.f,
                    //             (phongAttrib >> 8 & 0xFFu) / 255.f);
                    hitMaterial = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + attPtr];
                    //color = lut[child_shift] * 0.5f + 0.5f;

                    //if ((lookupEntry & 0xFFu) != 0) {
                    //    color = RED;
                    //} else {
                    //    color = BLUE;
                    //}

                    break;// at t_min (overridden with tv_min).
                }

                // PUSH
                // Write current parent to the stack.

                if (tc_max < h) { WRITE_SVO_STACK(svoStack, scale, parent, t_max, nodeOffset); }
                h = tc_max;

                // Find child descriptor corresponding to the current voxel.

                //uint ptr = child_descriptor.data1 >> 16u;// child pointer
                uint ptr = child_descriptor.data2;// child pointer

                /* if ((child_descriptor.childData & 0x10000) != 0) { // FAR
                          ptr = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + int(ptr * 2)];
                        }*/

                uint validMask = (child_descriptor.data1 >> 8u) & 0xFFu;
                uint leafMask = child_descriptor.data1 & 0xFFu;

                child_shift = 7 - child_shift;

                validMask = validMask << (8 - child_shift) & 0xFFu;
                leafMask = leafMask << (8 - child_shift) & 0xFFu;

                uint ofs = bitCount(validMask) - bitCount(leafMask);

                //color = lut[ofs] * 0.5 + 0.3;
                uint offsetFromParent = ptr + ofs;
                nodeOffset = parent / 2 + offsetFromParent;
                parent = parent + int(offsetFromParent * 2);

                // Select child voxel that the ray enters first.

                idx = 0;
                scale--;
                scale_exp2 = halfScale;

                if (t_center.x > t_min) {
                    idx ^= 1;
                    pos.x += scale_exp2;
                }
                if (t_center.y > t_min) {
                    idx ^= 2;
                    pos.y += scale_exp2;
                }
                if (t_center.z > t_min) {
                    idx ^= 4;
                    pos.z += scale_exp2;
                }

                // Update active t-span and invalidate cached child descriptor.

                t_max = tv_max;
                //child_descriptor.childData = 0;
                fetch = true;
                continue;
            }
        }

        // ADVANCE
        // Step along the ray.
        int step_mask = 0;
        if (t_corner.x <= tc_max) {
            step_mask ^= 1;
            pos.x -= scale_exp2;
        }
        if (t_corner.y <= tc_max) {
            step_mask ^= 2;
            pos.y -= scale_exp2;
        }
        if (t_corner.z <= tc_max) {
            step_mask ^= 4;
            pos.z -= scale_exp2;
        }

        // Update active t-span and flip bits of the child slot index.

        t_min = tc_max;
        idx ^= step_mask;

        // Proceed with pop if the bit flips disagree with the ray direction.

        if ((idx & step_mask) != 0) {
            // POP
            // Find the highest differing bit between the two positions.

            uint differing_bits = 0;
            if ((step_mask & 1) != 0) differing_bits |= floatBitsToInt(pos.x) ^ floatBitsToInt(pos.x + scale_exp2);
            if ((step_mask & 2) != 0) differing_bits |= floatBitsToInt(pos.y) ^ floatBitsToInt(pos.y + scale_exp2);
            if ((step_mask & 4) != 0) differing_bits |= floatBitsToInt(pos.z) ^ floatBitsToInt(pos.z + scale_exp2);
            scale = findMSB(differing_bits);// position of the highest bit
            scale_exp2 = intBitsToFloat((scale - SVO_CAST_STACK_DEPTH + 127) << 23);// exp2f(scale - s_max)

            // Restore parent voxel from the stack.

            parent = READ_SVO_STACK(svoStack, scale).node;
            t_max = READ_SVO_STACK(svoStack, scale).tMax;
            nodeOffset = READ_SVO_STACK(svoStack, scale).offset;

            // Round cube position and extract child slot index.

            int shx = floatBitsToInt(pos.x) >> scale;
            int shy = floatBitsToInt(pos.y) >> scale;
            int shz = floatBitsToInt(pos.z) >> scale;
            pos.x = intBitsToFloat(shx << scale);
            pos.y = intBitsToFloat(shy << scale);
            pos.z = intBitsToFloat(shz << scale);
            idx = (shx & 1) | ((shy & 1) << 1) | ((shz & 1) << 2);

            // Prevent same parent from being stored again and invalidate cached child descriptor.

            h = 0.0f;
            //child_descriptor.childData = 0;
            fetch = true;
        }
    }

    if (scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS) { t_min = 2.0f; }

    // Undo mirroring of the coordinate system.

    if ((octant_mask & 1) == 0) pos.x = 3.0f - scale_exp2 - pos.x;
    if ((octant_mask & 2) == 0) pos.y = 3.0f - scale_exp2 - pos.y;
    if ((octant_mask & 4) == 0) pos.z = 3.0f - scale_exp2 - pos.z;

    // Output results.

    res.t = t_min;
    res.iter = iter;
    res.pos.x = min(max(ray.origin.x + t_min * ray.direction.x, pos.x + epsilon), pos.x + scale_exp2 - epsilon);
    res.pos.y = min(max(ray.origin.y + t_min * ray.direction.y, pos.y + epsilon), pos.y + scale_exp2 - epsilon);
    res.pos.z = min(max(ray.origin.z + t_min * ray.direction.z, pos.z + epsilon), pos.z + scale_exp2 - epsilon);
    res.node = parent;
    res.childIdx = idx ^ octant_mask ^ 7;
    res.stackPtr = scale;
    res.materialId = hitMaterial;
    res.hit = !(scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS);
    return res;
}

TraceResult traceModel(uint modelIndex, Ray ray) {
    ray.origin = (modelInfos.infos[modelIndex].inverseObjectMatrix * vec4(ray.origin, 1)).xyz;
    ray.direction =//normalize(
    (transpose(modelInfos.infos[modelIndex].inverseObjectMatrix) * vec4(ray.direction, 0)).xyz;//);
    ray.originSize = 0.02;
    ray.directionSize = 0;
    TraceResult result;
    result.objectId = modelIndex;
    result.hit = false;
    result.iter = 0;

    ray.origin += vec3(1, 1, 1);

    result = trace(ray, floatBitsToUint(modelInfos.infos[modelIndex].scaleAndSvoBufferOffset.w),
    modelInfos.infos[modelIndex].materialsOffset.x);
    result.materialId += modelInfos.infos[modelIndex].materialsOffset.x;
    result.objectId = modelIndex;

    return result;
}

    #define IS_BVH_NODE_LEAF(node) ((floatBitsToUint(node.AABB2leafNext.z) & BVH_LEAF_NODE_MASK) != 0)
    #define GET_BVH_NODE_OFFSET(node) (floatBitsToUint(node.AABB2leafNext.z) & BVH_OFFSET_MASK)
    #define GET_BVH_MIN_AABB(node) node.AABB1.xyz
    #define GET_BVH_MAX_AABB(node) vec3(node.AABB1.w, node.AABB2leafNext.xy)

    #define READ_BVH_STACK_ALT(stack, idx) stack[idx]
    #define WRITE_BVH_STACK_ALT(stack, idx, n) stack[idx] = n;

AABBIntersection_ALT bvhStack_ALT[BVH_STACK_SIZE];
TraceResult traceBVHImproved(Ray ray, uint idx, uint idy) {
    Ray aabbRay = ray;
    aabbRay.direction = normalize(aabbRay.direction);

    TraceResult result;
    result.hit = false;
    result.isOnlyAABB = true;
    result.iter = 0;
    result.normal = vec3(0);

    TraceResult bestModelResult;
    bestModelResult.hit = false;
    bestModelResult.t = INF;
    bestModelResult.iter = 0;
    bestModelResult.distanceInWorldSpace = INF;

    uint stackTop = 0;

    // BVH root
    uint nodeToCheckIdx = 0;
    BVHNode currentNode = bvh.nodes[nodeToCheckIdx];
    vec3 boxMin = GET_BVH_MIN_AABB(currentNode);
    vec3 boxMax = GET_BVH_MAX_AABB(currentNode);
    uint offset = GET_BVH_NODE_OFFSET(currentNode);
    AABBIntersection_ALT intersectionA =
    intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

while (intersectionA.hit) {
    while (!intersectionA.isLeaf && intersectionA.hit) {
        nodeToCheckIdx = intersectionA.offset + 1;
        currentNode = bvh.nodes[nodeToCheckIdx];
        boxMin = GET_BVH_MIN_AABB(currentNode);
        boxMax = GET_BVH_MAX_AABB(currentNode);
        offset = GET_BVH_NODE_OFFSET(currentNode);
        AABBIntersection_ALT intersectionB =
        intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

nodeToCheckIdx = intersectionA.offset;
currentNode = bvh.nodes[nodeToCheckIdx];
boxMin = GET_BVH_MIN_AABB(currentNode);
boxMax = GET_BVH_MAX_AABB(currentNode);
offset = GET_BVH_NODE_OFFSET(currentNode);
intersectionA = intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

// sort child nodes
if (intersectionB.distance < intersectionA.distance) {
    AABBIntersection_ALT tmp = intersectionB;
    intersectionB = intersectionA;
    intersectionA = tmp;
}
// B is present only if both children have been hit, push it onto stack - if it's further away than the closest intersected model skip it
if (intersectionB.hit && intersectionB.distance < bestModelResult.distanceInWorldSpace) {
    WRITE_BVH_STACK_ALT(bvhStack_ALT, stackTop++, intersectionB);
}
// there was no hit, read stack
if (!intersectionA.hit && stackTop > 0) { intersectionA = READ_BVH_STACK_ALT(bvhStack_ALT, --stackTop); }
}
if (intersectionA.isLeaf && intersectionA.hit) {
    if (intersectionA.distance < bestModelResult.distanceInWorldSpace) {
        TraceResult modelTraceResult = traceModel(intersectionA.offset, ray);
        modelTraceResult.posInWorldSpace =
        (modelInfos.infos[modelTraceResult.objectId].objectMatrix * vec4(modelTraceResult.pos - vec3(1, 1, 1), 1))
        .xyz;
        modelTraceResult.distanceInWorldSpace = distance(ray.origin, modelTraceResult.posInWorldSpace);
        if (modelTraceResult.hit && modelTraceResult.distanceInWorldSpace < bestModelResult.distanceInWorldSpace) {
            bestModelResult = modelTraceResult;
        }
        result.iter += modelTraceResult.iter;
    }

    // stack is empty, end
    if (stackTop == 0) {
        intersectionA.hit = false;
    } else { // read stack
        intersectionA = READ_BVH_STACK_ALT(bvhStack_ALT, --stackTop);
    }
}
}

if (bestModelResult.hit) {
    bestModelResult.normal = normalize(
    (transpose(modelInfos.infos[bestModelResult.objectId].objectMatrix) * vec4(bestModelResult.normal, 0)).xyz);
    bestModelResult.iter = result.iter;
    return bestModelResult;
}
return result;
}

/********************************************* PROBE FUNCTIONS *******************************************/

ivec3 probeIndexToGridCoord(uint probeIndex) {
    return ivec3(probeIndex & (grid.gridSize.x - 1),
    (probeIndex & ((grid.gridSize.x * grid.gridSize.y) - 1)) >> findMSB(grid.gridSize.x),
    probeIndex >> findMSB(grid.gridSize.x * grid.gridSize.y));
}
vec3 gridCoordToProbeGoord(ivec3 gridCoord) { return grid.gridStep * gridCoord + grid.gridPos.xyz; }

vec3 probeIndexToProbeCoord(uint probeIndex) { return gridCoordToProbeGoord(probeIndexToGridCoord(probeIndex)); }

void main() {
    ivec3 probeTextureSize = imageSize(probeImages);
    if (gl_GlobalInvocationID.x > probeTextureSize.x || gl_GlobalInvocationID.y > probeTextureSize.y
    || gl_GlobalInvocationID.z > probeTextureSize.z) {
        return;
    }

    const uint probeId = gl_GlobalInvocationID.z;

    vec2 normalisedOctCoords = (vec2(gl_GlobalInvocationID.xy) - 512.0) / 512.0;
    vec3 v = octDecode(normalisedOctCoords);

    Ray probeRay;
    probeRay.origin = probeIndexToProbeCoord(probeId);
    probeRay.direction = v * 10;

    TraceResult traceResult;
    traceResult.hit = false;
    traceResult.t = INF;
    traceResult.iter = 0;

    traceResult = traceBVHImproved(probeRay, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    uint materialId = 0;
    if (traceResult.hit) { materialId = traceResult.materialId; }
    const vec3 normal = traceResult.hit ? traceResult.normal : vec3(0);
    //const float depth = traceResult.hit ? (traceResult.distanceInWorldSpace / TMP_FAR) : TMP_FAR;
    const float depth = computeLogDepth(traceResult.hit ? traceResult.distanceInWorldSpace : TMP_FAR);

    const float materialBytes = uintBitsToFloat(materialId);

    const vec2 encodedNormal = encodeNormal(traceResult.normal);
    const int encodedBitNormal1 = int(encodedNormal.x * NORMAL_ELEMENT_MAX);
    const int encodedBitNormal2 = int(encodedNormal.y * NORMAL_ELEMENT_MAX);
    const int encodedBitNormal = (encodedBitNormal1 << NORMAL1_SHIFT) | (encodedBitNormal2 << NORMAL2_SHIFT);

    const float depthAndNormalBytes = uintBitsToFloat(uint(depth * DEPTH_MAX) | (encodedBitNormal << NORMALS_SHIFT));

    const vec2 probeData = vec2(materialBytes, depthAndNormalBytes);

    imageStore(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, probeId), vec4(probeData, 0, 0));

    //--------------
}