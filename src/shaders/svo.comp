#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define PI 3.141592
#define INF 10000000000000.0
#define EPSILON 0.001

#define MAX_BOUNCES 40
#define SHADOW 0.35

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba8) uniform image2D computeImage;
//layout (binding = 1, r32f) uniform image2D depthImage;

layout(binding = 1) uniform UniformCamera {
    vec4 pos;
    vec4 dir;
} camera;
layout (binding = 2) uniform UniformLigtPos {
    vec4 pos;
} lightPos;
layout(std430, binding = 3) buffer VoxelSVO_SSBO {
 int ixesMan[];
};


struct Ray
{
    vec3 origin;
    vec3 direction;
};


void main() {
    uint idx = gl_GlobalInvocationID.x;
    uint idy = gl_GlobalInvocationID.y;

    ivec2 dimensions = imageSize(computeImage);
    if (idx > dimensions.x || idy > dimensions.y) {
        return;
    }
    const vec3 finalColor = vec3(idx / float(dimensions.x), idy / float(dimensions.y), camera.pos.x / camera.dir.x);
    imageStore(computeImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 0.0));
    //const float depth = lightPos.pos.x / float(ixesMan[idx + idy * dimensions.x]);
    //imageStore(depthImage, ivec2(gl_GlobalInvocationID.xy), vec4(depth));
}