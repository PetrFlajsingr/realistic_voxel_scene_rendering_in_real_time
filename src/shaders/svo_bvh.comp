/**
 * A shader to render a scene using ESVO ray tracing with one ray per pixel. It is possible to enable hard shadows as well.
 * For each ray a BVH is traversed and intersection calculated within the contained SVO.
 */

#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable

#ifndef LOCAL_SIZE_X
#define LOCAL_SIZE_X 8
#endif
#ifndef LOCAL_SIZE_Y
#define LOCAL_SIZE_Y 8
#endif

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y) in;

/********************************************* CONSTANTS *******************************************/

#define PI 3.141592
#define INF 10000000000000.0
#define EPSILON 0.001

#define MAX_BOUNCES 40
#define SHADOW 0.35

#define BVH_STACK_SIZE 23

#define SVO_HEADER_SIZE 2

const uint BVH_OFFSET_MASK = 0x7FFFFFFF;
const uint BVH_LEAF_NODE_MASK = ~BVH_OFFSET_MASK;

#define CHILD_PTR_MASK 0xFFFE0000u

/**
 * Lookup table for debug colors
 */
const vec3 lut[8] = vec3[8](vec3(0, 0, 0),// 0
                            vec3(1, 0, 0),// 1
                            vec3(0, 1, 0),// 2
                            vec3(1, 1, 0),// 3
                            vec3(0, 0, 1),// 4
                            vec3(1, 0, 1),// 5
                            vec3(0, 1, 1),// 6
                            vec3(1, 1, 1) // 7
);

#define MAX_RAYCAST_ITERATIONS 10000

/********************************************* ENUMS *******************************************/

#define MATERIAL_TYPE uint
#define MATERIAL_TYPE_DIFFUSE 0
#define MATERIAL_TYPE_METAL 1
#define MATERIAL_TYPE_GLASS 2
#define MATERIAL_TYPE_EMIT 3
#define MATERIAL_TYPE_BLEND 4
#define MATERIAL_TYPE_MEDIA 5
#define MATERIAL_TYPE_CLOUD 6
/**
 * Selected debug view type
 */
#define VIEW_TYPE int
#define VIEW_TYPE_COLOR 0
#define VIEW_TYPE_NORMALS 1
#define VIEW_TYPE_ITERATIONS 2
#define VIEW_TYPE_DISTANCE 3
#define VIEW_TYPE_CHILD_INDEX 4
#define VIEW_TYPE_TREE_LEVEL 5

/********************************************* STRUCTS *******************************************/

struct Ray {
  vec3 origin;
  float originSize;
  vec3 direction;
  float directionSize;
};
/**
 * ESVO child descriptor.
 */
struct ChildDescriptor {
  uint data1; /**< Leaf mask 8b, valid mask 8b, unused 16b */
  uint data2; /**< child pointer 32b */
};
/**
 * A node of BVH tree containing its AABB and children info.
 */
struct BVHNode {
  vec4 AABB1;         /**< p1.xyz, p2.x */
  vec4 AABB2leafNext; /**< p2.yz, 1bit leaf/node, 31 bit child offset/model index */
};
/**
 * Model transform, AABB and material info.
 */
struct ModelInfo {
  vec4 scaleAndSvoBufferOffset; /**< .xyz is scale, floatBitsToInt(.w) is offset */
  mat4 objectMatrix;            /**< Transformation matrix */
  mat4 inverseObjectMatrix;     /**< Inverse transform matrix */
  vec4 AABB1;                   /**< xyz is p1.xyz, w is p2.x */
  vec4 AABB2;                   /**< xy is p2.yz */
  ivec4 materialsOffset;        /**< Offset of material data in material buffer */
};
/**
 * Material parameters.
 */
struct Material {
  MATERIAL_TYPE type;
  float metalness;
  float rougness;
  float specular;
  float indexOfRefraction;
  float flux;
  float emission;
  float lowDynamicRange;
  float transparency;
  float alpha;
  float density;
  float red;
  float green;
  float blue;
  float colorAlpha;
};
/**
 * Coordinates of near and far points in view frustum for ray.
 */
struct NearFarCoords {
  vec4 near;
  vec4 far;
};
/**
 * Sphere, used to visualize probes.
 */
struct Sphere {
  vec3 position;
  float radius;
};
/**
 * ESVO tracing result.
 */
struct TraceResult {
  float distance;             /**< Hit distance in model space */
  float distanceInWorldSpace; /**< Hit distance in world space */
  vec3 pos;                   /**< Hit point position in model space */
  vec3 posInWorldSpace;       /**< Hit point position in world space */
  uint childIdx;              /**< Index of hit node within the parent */
  bool hit;                   /**< Hit or miss flag */
  int iter;                   /**< Count of iterations done in while tracing the ray */
  int stackPtr;               /**< Info about level of hit voxel within octree */
  uint materialId;            /**< ID of hit material. This is an id within this model's material buffer, 
      offset needs to be applied as well */
  vec3 normal;                /**< Normal of hit point */
  bool isOnlyAABB;            /**< True of only AABB has been hit but not a voxel */
  bool aabbHit;               /**< True if aabb has been hit */
  uint objectId;              /**< ID of the hit object */
};
/**
 * AABB intersection used for BVH traversal.
 */
struct AABBIntersection_ALT {
  bool hit;       /**< Hit or miss flag */
  float distance; /**< Distance to intersection */
  uint offset;    /**< Offset of child nodes */
  bool isLeaf;    /**< True if the hit node is a leaf */
};

/********************************************* BINDINGS *******************************************/
/**
 * An output image.
 */
layout(binding = 0, rgba8) uniform image2D computeImage;
/**
 * Scene camera info.
 */
layout(binding = 1) uniform UniformCamera {
  vec4 pos;         /**< Position in world space */
  vec4 dir;         /**< Look direction */
  vec4 up;          /**< Up direction */
  mat4 view;        /**< Camera's view matrix */
  mat4 projection;  /**< Camera's projection matrix */
  mat4 invProjView; /**< Camera's inversion projection matrix used to bring ray into world space */
  float near;       /**< Near plane distance */
  float far;        /**< Far plane distance */
  int screenWidth;  /**< Screen resolution x */
  int screenHeight; /**< Screen resolution y */
}
camera;
/**
 * Info about sun light
 */
layout(binding = 2) uniform UniformLigtValues {
  vec4 pos;           /**< Position in world space */
  vec4 ambientColor;  /**< Light's ambient color */
  vec4 diffuseColor;  /**< Light's diffuse color */
  vec4 specularColor; /**< Light's specular color */
}
light;
/**
 * Storage for model SVOs. Offsets for each SVO are saved in model info buffer.
 * Each SVO has an info section, array of child descriptors, array of attachment pointers and an array of attachment descriptors
 */
layout(std430, binding = 3) buffer VoxelSVO_SSBO {
  //uint infoSectionPtr;
  //uint attachmentsPtr;
  //uint childDescriptors[];
  uint data[];// uint infosectionPtr, uint attachmentsPtr, childDescriptors[]
}
svo;
/**
 * Various debug values.
 */
layout(binding = 4, std140) uniform Debug {
  VIEW_TYPE viewType;
  int debugVal;
  int shadows;
  float debugFloatVal;
  float iterDivide;
  uint printEnabled;
  uint visualizeBVH;
  uint visualizeProbes;
  uint selectedProbeIdx;
}
debug;
/**
 * An image to visualize iteration count for SVO ray marching.
 */
layout(binding = 5, r32f) uniform image2D iterImage;
/**
 * Information about models.
 */
layout(std430, binding = 6) buffer SVOModelInfos { ModelInfo infos[]; }
modelInfos;
/**
 * Bounding volume hierarchy used to speed up scene traversal.
 */
layout(std430, binding = 7) buffer BVHModelAABBs { BVHNode nodes[]; }
bvh;
/**
 * Probe positions for debug purposes. These are rendered as simple spheres without shading. 
 */
layout(std430, binding = 8) buffer LightFieldProbes { vec4 probes[]; }
lfp;
/**
 * Buffer for all materials. Materials for a certain object can be accessed via materialID and model's offset within this buffer.
 */
layout(std430, binding = 9) buffer Materials { Material data[]; }
materials;

/********************************************* UTIL FUNCTIONS *******************************************/
/**
 * Find max component.
 */
float max(vec2 v) { return max(v.x, v.y); }
/**
 * Find max component.
 */
float max(vec3 v) { return max(max(v.x, v.y), v.z); }
/**
 * Find max component.
 */
float max(vec4 v) { return max(max(max(v.x, v.y), v.z), v.a); }

/**
 * Find min component.
 */
float min(vec2 v) { return min(v.x, v.y); }
/**
 * Find min component.
 */
float min(vec3 v) { return min(min(v.x, v.y), v.z); }
/**
 * Find min component.
 */
float min(vec4 v) { return min(min(min(v.x, v.y), v.z), v.a); }

/********************************************* STACK *******************************************/
#define SVO_STACK_SIZE 23
#define SVO_CAST_STACK_DEPTH SVO_STACK_SIZE
struct SvoStackData {
  int node;
  float tMax;
  uint offset;
};

SvoStackData svoStack[SVO_STACK_SIZE + 1];

#define READ_SVO_STACK(stack, idx) stack[idx]
#define WRITE_SVO_STACK(stack, idx, n, tmax, o)                                                                        \
  stack[idx].node = n;                                                                                                 \
  stack[idx].tMax = tmax;                                                                                              \
  stack[idx].offset = o

/********************************************* CAMERA/RAY FUNCTIONS *******************************************/
/**
 * Normalize screen coord to [-1, 1].
 */
vec2 normalizeScreenCoords(vec2 screenCoord, vec2 resolution) {
  vec2 result = 2.0 * (screenCoord / resolution.xy - 0.5);
  result.x *= resolution.x / float(resolution.y);
  return result;
}
/**
 * Create a ray based on screen coord and screen's resolution.
 */
Ray createRay(vec2 screenCoord, vec2 resolution) {
  float x = (2.0f * screenCoord.x) / resolution.x - 1.0f;
  float y = (2.0f * screenCoord.y) / resolution.y - 1.0f;
  float z = 1.0f;
  vec3 ray_nds = vec3(x, y, z);
  vec4 ray_clip = vec4(ray_nds.xy, -1.0, 1.0);
  vec4 ray_eye = inverse(camera.projection) * ray_clip;
  ray_eye = vec4(ray_eye.xy, -1.0, 0.0);
  vec3 ray_wor = (inverse(camera.view) * ray_eye).xyz;
  ray_wor = normalize(ray_wor);
  Ray result;
  result.origin = camera.pos.xyz;
  result.direction = ray_wor;
  return result;
}
/**
 * Calculate near and far coord for pixel for screen info,
 */
NearFarCoords getNearFarCoords(vec2 screenCoord, vec2 resolution) {
  const float xNorm = 2.0 * screenCoord.x / resolution.x - 1.0;
  const float yNorm = 2.0 * screenCoord.y / resolution.y - 1.0;
  return NearFarCoords(vec4(xNorm, yNorm, -1, 1), vec4(xNorm, yNorm, 1, 1));
}
/**
 * Transform near and far coords to a ray.
 */
Ray nearFarCoordsToRay(NearFarCoords coords, mat4 inverseProjectionView) {
  coords.near = inverseProjectionView * coords.near;
  coords.far = inverseProjectionView * coords.far;
  Ray result;
  result.origin = coords.near.xyz / coords.near.w;
  result.direction = normalize((coords.far.xyz / coords.far.w) - result.origin);
  return result;
}

/********************************************* INTERSECTION FUNCTIONS *******************************************/
/**
 * Calculate ray sphere intersection and return distance to it.
 */
float SphereIntersection(Ray ray, Sphere sphere) {
  const vec3 delta = ray.origin - sphere.position;
  const float b = dot((delta * 2), ray.direction);
  const float c = dot(delta, delta) - (sphere.radius * sphere.radius);

  float disc = b * b - 4 * c;
  if (disc < 0) {
    return 0;
  } else {
    disc = sqrt(disc);
  }
  const float result1 = -b + disc;
  const float result2 = -b - disc;

  return (result2 > EPSILON) ? result2 / 2 : ((result1 > EPSILON) ? result1 / 2 : 0);
}
/**
 * Calculate intersection to an AABB, which is a part of scene's BVH. Additional data are saved in the result for ease of use within a stack.
 */
AABBIntersection_ALT intersectAABBDistance_ALT(Ray ray, vec3 boxMin, vec3 boxMax, uint offset, bool isLeaf) {
  const vec3 tMin = (boxMin - ray.origin) / ray.direction;
  const vec3 tMax = (boxMax - ray.origin) / ray.direction;
  const vec3 t1 = min(tMin, tMax);
  const vec3 t2 = max(tMin, tMax);
  const float tNear = max(max(t1.x, t1.y), t1.z);
  const float tFar = min(min(t2.x, t2.y), t2.z);
  AABBIntersection_ALT result;
  result.hit = tNear > 0.f && tNear < tFar || (tNear < 0.f && tFar > 0.f);
  result.distance = tNear + float(!result.hit) * INF;
  result.offset = offset;
  result.isLeaf = isLeaf;
  return result;
}

/********************************************* TRACING FUNCTIONS *******************************************/
/**
 * Trace a ray through an SVO.
 */
TraceResult trace(Ray ray, uint offsetInSVOBuffer) {
  const float epsilon = exp2(-SVO_CAST_STACK_DEPTH);
  float ray_orig_sz = ray.originSize;
  int iter = 0;

  ray.direction.x = abs(ray.direction.x) > epsilon ? ray.direction.x : (ray.direction.x >= 0 ? epsilon : -epsilon);
  ray.direction.y = abs(ray.direction.y) > epsilon ? ray.direction.y : (ray.direction.y >= 0 ? epsilon : -epsilon);
  ray.direction.z = abs(ray.direction.z) > epsilon ? ray.direction.z : (ray.direction.z >= 0 ? epsilon : -epsilon);

  vec3 distanceCoef = 1.f / -abs(ray.direction);// / 10;

  vec3 distanceBias = distanceCoef * ray.origin;

  int octantMask = 7;
  const float biasCoef = 3.0f;
  if (ray.direction.x > 0.0f) {
    octantMask ^= 1;
    distanceBias.x = biasCoef * distanceCoef.x - distanceBias.x;
  }
  if (ray.direction.y > 0.0f) {
    octantMask ^= 2;
    distanceBias.y = biasCoef * distanceCoef.y - distanceBias.y;
  }
  if (ray.direction.z > 0.0f) {
    octantMask ^= 4;
    distanceBias.z = biasCoef * distanceCoef.z - distanceBias.z;
  }

  float distanceMin = max(2.f * distanceCoef - distanceBias);
  float distanceMax = min(distanceCoef - distanceBias);
  float h = distanceMax;
  distanceMin = max(distanceMin, 0.0f);
  distanceMax = min(distanceMax, 1.0f);

  int parent = 0;
  uint nodeOffset = 0;
  ChildDescriptor childDescriptor = ChildDescriptor(0, 0);// invalid until fetched
  int idx = 0;
  vec3 pos = vec3(1.0f, 1.0f, 1.0f);
  int scale = SVO_CAST_STACK_DEPTH - 1;
  float scaleExp2 = 0.5f;// exp2f(scale - s_max)

  const float posCoef = 1.5f;
  if (posCoef * distanceCoef.x - distanceBias.x > distanceMin) {
    idx ^= 1;
    pos.x = posCoef;
  }
  if (posCoef * distanceCoef.y - distanceBias.y > distanceMin) {
    idx ^= 2;
    pos.y = posCoef;
  }
  if (posCoef * distanceCoef.z - distanceBias.z > distanceMin) {
    idx ^= 4;
    pos.z = posCoef;
  }

  TraceResult res;
  uint hitMaterial;
  bool fetch = true;

  while (scale < SVO_CAST_STACK_DEPTH) {
    iter++;
    if (iter > MAX_RAYCAST_ITERATIONS) break;

    // Fetch child descriptor unless it is already valid.
    if (fetch) {
      childDescriptor.data1 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent];
      childDescriptor.data2 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + 1];
      fetch = false;
    }

    vec3 distanceCorner = pos * distanceCoef - distanceBias;
    float distanceCornerComponentMin = min(distanceCorner);

    int childShift = idx ^ octantMask;// permute child slots based on the mirroring
    uint childMask = childDescriptor.data1 << childShift;
    if ((childMask & 0x8000u) != 0 && distanceMin <= distanceMax) {
      // Terminate if the voxel is small enough.
      //if (distanceCornerComponentMin * ray.directionSize + ray_orig_sz >= scaleExp2) {
      //    color = lut[childShift] * 0.5 + 0.1;
      //    break;// at distanceMin
      //}
      //color = vec3(1, 0, 0);

      // INTERSECT
      // Intersect active t-span with the cube and evaluate
      // tx(), ty(), and tz() at the center of the voxel.

      float tvMax = min(distanceMax, distanceCornerComponentMin);
      float halfScale = scaleExp2 * 0.5f;
      vec3 distanceCenter = halfScale * distanceCoef + distanceCorner;

      if (distanceMin <= tvMax) {
        // Terminate if the corresponding bit in the non-leaf mask is not set.
        if ((childMask & 0x0080u) != 0) {
          childShift = 7 - childShift;
          vec3 norm, distanceCorner = distanceCoef * (pos + scaleExp2) - distanceBias;
          if (distanceCorner.x > distanceCorner.y && distanceCorner.x > distanceCorner.z) {
            norm = vec3(-1, 0, 0);
          } else if (distanceCorner.y > distanceCorner.z) {
            norm = vec3(0, -1, 0);
          } else {
            norm = vec3(0, 0, -1);
          }

          if ((octantMask & 1) == 0u) { norm.x = -norm.x; }
          if ((octantMask & 2) == 0u) { norm.y = -norm.y; }
          if ((octantMask & 4) == 0u) { norm.z = -norm.z; }
          res.normal = norm;

          uint lookupOffset = svo.data[offsetInSVOBuffer];
          uint lookupEntry = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + lookupOffset + nodeOffset];
          uint lookupEntryMask = lookupEntry & 0xFFu;
          uint siblingOffset = bitCount(lookupEntryMask << (8 - childShift) & 0xFFu);
          uint attPtr = lookupEntry >> 8u & 0xFFFFFFu;
          attPtr += siblingOffset + svo.data[offsetInSVOBuffer + 1];
          //uint phongAttrib = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + attPtr];
          //color = vec3((phongAttrib >> 24u & 0xFFu) / 255.f, (phongAttrib >> 16u & 0xFFu) / 255.f,
          //             (phongAttrib >> 8 & 0xFFu) / 255.f);
          hitMaterial = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + attPtr];
          //color = lut[childShift] * 0.5f + 0.5f;

          //if ((lookupEntry & 0xFFu) != 0) {
          //    color = RED;
          //} else {
          //    color = BLUE;
          //}

          break;// at distanceMin (overridden with tv_min).
        }

        // PUSH
        // Write current parent to the stack.

        if (distanceCornerComponentMin < h) { WRITE_SVO_STACK(svoStack, scale, parent, distanceMax, nodeOffset); }
        h = distanceCornerComponentMin;

        // Find child descriptor corresponding to the current voxel.

        //uint ptr = childDescriptor.data1 >> 16u;// child pointer
        uint ptr = childDescriptor.data2;// child pointer

        /* if ((childDescriptor.childData & 0x10000) != 0) { // FAR
                          ptr = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + int(ptr * 2)];
                        }*/

        uint validMask = (childDescriptor.data1 >> 8u) & 0xFFu;
        uint leafMask = childDescriptor.data1 & 0xFFu;

        childShift = 7 - childShift;

        validMask = validMask << (8 - childShift) & 0xFFu;
        leafMask = leafMask << (8 - childShift) & 0xFFu;

        uint ofs = bitCount(validMask) - bitCount(leafMask);

        //color = lut[ofs] * 0.5 + 0.3;
        uint offsetFromParent = ptr + ofs;
        nodeOffset = parent / 2 + offsetFromParent;
        parent = parent + int(offsetFromParent * 2);

        // Select child voxel that the ray enters first.

        idx = 0;
        scale--;
        scaleExp2 = halfScale;

        if (distanceCenter.x > distanceMin) {
          idx ^= 1;
          pos.x += scaleExp2;
        }
        if (distanceCenter.y > distanceMin) {
          idx ^= 2;
          pos.y += scaleExp2;
        }
        if (distanceCenter.z > distanceMin) {
          idx ^= 4;
          pos.z += scaleExp2;
        }

        // Update active t-span and invalidate cached child descriptor.

        distanceMax = tvMax;
        //childDescriptor.childData = 0;
        fetch = true;
        continue;
      }
    }

    // ADVANCE
    // Step along the ray.
    int stepMask = 0;
    if (distanceCorner.x <= distanceCornerComponentMin) {
      stepMask ^= 1;
      pos.x -= scaleExp2;
    }
    if (distanceCorner.y <= distanceCornerComponentMin) {
      stepMask ^= 2;
      pos.y -= scaleExp2;
    }
    if (distanceCorner.z <= distanceCornerComponentMin) {
      stepMask ^= 4;
      pos.z -= scaleExp2;
    }

    // Update active t-span and flip bits of the child slot index.

    distanceMin = distanceCornerComponentMin;
    idx ^= stepMask;

    // Proceed with pop if the bit flips disagree with the ray direction.

    if ((idx & stepMask) != 0) {
      // POP
      // Find the highest differing bit between the two positions.

      uint differingBits = 0;
      if ((stepMask & 1) != 0) differingBits |= floatBitsToInt(pos.x) ^ floatBitsToInt(pos.x + scaleExp2);
      if ((stepMask & 2) != 0) differingBits |= floatBitsToInt(pos.y) ^ floatBitsToInt(pos.y + scaleExp2);
      if ((stepMask & 4) != 0) differingBits |= floatBitsToInt(pos.z) ^ floatBitsToInt(pos.z + scaleExp2);
      scale = findMSB(differingBits);                                        // position of the highest bit
      scaleExp2 = intBitsToFloat((scale - SVO_CAST_STACK_DEPTH + 127) << 23);// exp2f(scale - s_max)

      // Restore parent voxel from the stack.

      parent = READ_SVO_STACK(svoStack, scale).node;
      distanceMax = READ_SVO_STACK(svoStack, scale).tMax;
      nodeOffset = READ_SVO_STACK(svoStack, scale).offset;

      // Round cube position and extract child slot index.

      int shx = floatBitsToInt(pos.x) >> scale;
      int shy = floatBitsToInt(pos.y) >> scale;
      int shz = floatBitsToInt(pos.z) >> scale;
      pos.x = intBitsToFloat(shx << scale);
      pos.y = intBitsToFloat(shy << scale);
      pos.z = intBitsToFloat(shz << scale);
      idx = (shx & 1) | ((shy & 1) << 1) | ((shz & 1) << 2);

      // Prevent same parent from being stored again and invalidate cached child descriptor.

      h = 0.0f;
      //childDescriptor.childData = 0;
      fetch = true;
    }
  }

  if (scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS) { distanceMin = 2.0f; }

  // Undo mirroring of the coordinate system.

  if ((octantMask & 1) == 0) pos.x = 3.0f - scaleExp2 - pos.x;
  if ((octantMask & 2) == 0) pos.y = 3.0f - scaleExp2 - pos.y;
  if ((octantMask & 4) == 0) pos.z = 3.0f - scaleExp2 - pos.z;

  // Output results.

  res.iter = iter;
  res.pos.x = min(max(ray.origin.x + distanceMin * ray.direction.x, pos.x + epsilon), pos.x + scaleExp2 - epsilon);
  res.pos.y = min(max(ray.origin.y + distanceMin * ray.direction.y, pos.y + epsilon), pos.y + scaleExp2 - epsilon);
  res.pos.z = min(max(ray.origin.z + distanceMin * ray.direction.z, pos.z + epsilon), pos.z + scaleExp2 - epsilon);
  res.childIdx = idx ^ octantMask ^ 7;
  res.stackPtr = scale;
  res.materialId = hitMaterial;
  res.hit = !(scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS);
  return res;
}
/**
 * Transform a ray into an object space and trace its SVO.
 */
TraceResult traceModel(uint modelIndex, Ray ray) {
  ray.origin = (modelInfos.infos[modelIndex].inverseObjectMatrix * vec4(ray.origin, 1)).xyz;
  ray.direction =                                                                                //normalize(
      (transpose(modelInfos.infos[modelIndex].inverseObjectMatrix) * vec4(ray.direction, 0)).xyz;//);
  ray.originSize = 0.02;
  ray.directionSize = 0;
  TraceResult result;
  result.objectId = modelIndex;
  result.hit = false;
  result.iter = 0;

  ray.origin += vec3(1, 1, 1);

  result = trace(ray, floatBitsToUint(modelInfos.infos[modelIndex].scaleAndSvoBufferOffset.w));
  result.objectId = modelIndex;

  return result;
}

#define IS_BVH_NODE_LEAF(node) ((floatBitsToUint(node.AABB2leafNext.z) & BVH_LEAF_NODE_MASK) != 0)
#define GET_BVH_NODE_OFFSET(node) (floatBitsToUint(node.AABB2leafNext.z) & BVH_OFFSET_MASK)
#define GET_BVH_MIN_AABB(node) node.AABB1.xyz
#define GET_BVH_MAX_AABB(node) vec3(node.AABB1.w, node.AABB2leafNext.xy)

#define READ_BVH_STACK_ALT(stack, idx) stack[idx]
#define WRITE_BVH_STACK_ALT(stack, idx, n) stack[idx] = n;

AABBIntersection_ALT bvhStack_ALT[BVH_STACK_SIZE];
/**
 * Trace a ray through a BVH. If there is a hit trace within an SVO.
 */
TraceResult traceBVHImproved(Ray ray, uint idx, uint idy) {
  Ray aabbRay = ray;
  aabbRay.direction = normalize(aabbRay.direction);

  TraceResult result;
  result.hit = false;
  result.isOnlyAABB = true;
  result.aabbHit = false;
  result.iter = 0;
  result.normal = vec3(0);

  TraceResult bestModelResult;
  bestModelResult.hit = false;
  bestModelResult.iter = 0;
  bestModelResult.distanceInWorldSpace = INF;

  uint stackTop = 0;

  // BVH root
  uint nodeToCheckIdx = 0;
  BVHNode currentNode = bvh.nodes[nodeToCheckIdx];
  vec3 boxMin = GET_BVH_MIN_AABB(currentNode);
  vec3 boxMax = GET_BVH_MAX_AABB(currentNode);
  uint offset = GET_BVH_NODE_OFFSET(currentNode);
  AABBIntersection_ALT intersectionA =
      intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

  while (intersectionA.hit) {
    while (!intersectionA.isLeaf && intersectionA.hit) {
      nodeToCheckIdx = intersectionA.offset + 1;
      currentNode = bvh.nodes[nodeToCheckIdx];
      boxMin = GET_BVH_MIN_AABB(currentNode);
      boxMax = GET_BVH_MAX_AABB(currentNode);
      offset = GET_BVH_NODE_OFFSET(currentNode);
      AABBIntersection_ALT intersectionB =
          intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

      nodeToCheckIdx = intersectionA.offset;
      currentNode = bvh.nodes[nodeToCheckIdx];
      boxMin = GET_BVH_MIN_AABB(currentNode);
      boxMax = GET_BVH_MAX_AABB(currentNode);
      offset = GET_BVH_NODE_OFFSET(currentNode);
      intersectionA = intersectAABBDistance_ALT(aabbRay, boxMin, boxMax, offset, IS_BVH_NODE_LEAF(currentNode));

      // sort child nodes
      if (intersectionB.distance < intersectionA.distance) {
        AABBIntersection_ALT tmp = intersectionB;
        intersectionB = intersectionA;
        intersectionA = tmp;
      }
      // B is present only if both children have been hit, push it onto stack - if it's further away than the closest intersected model skip it
      if (intersectionB.hit && intersectionB.distance < bestModelResult.distanceInWorldSpace) {
        WRITE_BVH_STACK_ALT(bvhStack_ALT, stackTop++, intersectionB);
      }
      // there was no hit, read stack
      if (!intersectionA.hit && stackTop > 0) { intersectionA = READ_BVH_STACK_ALT(bvhStack_ALT, --stackTop); }
    }
    if (intersectionA.isLeaf && intersectionA.hit) {
      if (intersectionA.distance < bestModelResult.distanceInWorldSpace) {
        TraceResult modelTraceResult = traceModel(intersectionA.offset, ray);
        modelTraceResult.posInWorldSpace =
            (modelInfos.infos[modelTraceResult.objectId].objectMatrix * vec4(modelTraceResult.pos - vec3(1, 1, 1), 1))
                .xyz;
        modelTraceResult.distanceInWorldSpace = distance(ray.origin, modelTraceResult.posInWorldSpace);
        if (modelTraceResult.hit && modelTraceResult.distanceInWorldSpace < bestModelResult.distanceInWorldSpace) {
          bestModelResult = modelTraceResult;
          result.isOnlyAABB = false;
        }
        result.iter += modelTraceResult.iter;
      }

      if (debug.visualizeBVH == 1) {
        result.isOnlyAABB = result.isOnlyAABB && true;
        result.aabbHit = true;
      }
      // stack is empty, end
      if (stackTop == 0) {
        intersectionA.hit = false;
      } else {// read stack
        intersectionA = READ_BVH_STACK_ALT(bvhStack_ALT, --stackTop);
      }
    }
  }

  if (bestModelResult.hit) {
    bestModelResult.normal = normalize(
        (transpose(modelInfos.infos[bestModelResult.objectId].objectMatrix) * vec4(bestModelResult.normal, 0)).xyz);
    bestModelResult.iter = result.iter;
    bestModelResult.isOnlyAABB = result.isOnlyAABB;
    bestModelResult.aabbHit = result.aabbHit;
    return bestModelResult;
  }
  return result;
}

/********************************************* LIGHTING FUNCTIONS *******************************************/
vec3 calcLight(vec3 color, vec3 pos, vec3 normal, vec3 lightDir, bool isInShadow) {
  const vec3 LAmbient = light.ambientColor.xyz;
  if (isInShadow) { return color * LAmbient; }

  const float NoL = max(dot(normal, -lightDir), 0.0);
  const vec3 LDirectional = light.diffuseColor.xyz * NoL;
  const vec3 diffuse = (LDirectional + LAmbient);
  const float specular = dot(normalize(light.pos.xyz - pos), reflect(normalize(pos - camera.pos.xyz), normal));
  vec3 intensity = diffuse + light.specularColor.xyz * (0.25 * pow(clamp(specular, 0.0, 1.0), 200.0));
  return color * intensity;
}

void main() {
  uint idx = gl_GlobalInvocationID.x;
  uint idy = gl_GlobalInvocationID.y;

  ivec2 dimensions = imageSize(computeImage);
  if (idx >= dimensions.x || idy >= dimensions.y) { return; }

  vec3 finalColor = vec3(0);
  vec3 iterColor = vec3(0);

  Ray ray;
  const vec2 uv = normalizeScreenCoords(vec2(idx, idy), vec2(dimensions));
  const vec4 nearPlanePos = vec4(uv, 0, 1) * camera.near;
  ray.origin = (camera.invProjView * nearPlanePos).xyz;
  ray.direction =// normalize(
      (camera.invProjView * vec4(uv * (camera.far - camera.near), camera.far + camera.near, camera.far - camera.near))
          .xyz;//);

  //Ray ray = nearFarCoordsToRay(getNearFarCoords(vec2(idx, idy), vec2(dimensions)), camera.invProjView);
  //ray.direction *= 100;

  TraceResult traceResult;
  traceResult.hit = false;
  traceResult.iter = 0;

  traceResult = traceBVHImproved(ray, idx, idy);

  TraceResult shadowTraceResult;
  shadowTraceResult.hit = false;
  const vec3 hitPointInCameraSpace = traceResult.posInWorldSpace;
  const vec3 lightDir = normalize(light.pos.xyz - hitPointInCameraSpace);
  if (debug.shadows == 1 && traceResult.hit) {
    Ray shadowRay;
    shadowRay.direction = lightDir * 50;// TODO: figure out why this needs to be done
    shadowRay.origin = hitPointInCameraSpace + EPSILON * lightDir;
    shadowRay.originSize = 0.02;
    shadowRay.directionSize = 0;
    shadowTraceResult = traceBVHImproved(shadowRay, idx, idy);
    traceResult.iter += shadowTraceResult.iter;
  }

  bool hitProbe = false;
  bool isSelectedProbe = false;
  if (debug.visualizeProbes == 1) {
    int probeCount = int(lfp.probes[0].w);
    ray.direction = normalize(ray.direction);
    for (int i = 0; i < probeCount; ++i) {
      Sphere sphere;
      sphere.radius = 0.2f;
      sphere.position = lfp.probes[i].xyz;
      const float sphereIntersection = SphereIntersection(ray, sphere);
      if (sphereIntersection > 0 && traceResult.distanceInWorldSpace > sphereIntersection) {
        hitProbe = true;
        isSelectedProbe = i == debug.selectedProbeIdx;
        break;
      }
    }
  }

  iterColor += vec3(traceResult.iter / debug.iterDivide);
  if (debug.viewType == VIEW_TYPE_ITERATIONS) {
    finalColor += vec3(traceResult.iter / debug.iterDivide);
  } else if (traceResult.hit) {
    if (debug.viewType == VIEW_TYPE_COLOR) {
      vec3 color = vec3(1);
      Material material =
          materials.data[modelInfos.infos[traceResult.objectId].materialsOffset.x + traceResult.materialId];
      color = vec3(material.red, material.green, material.blue);
      finalColor += calcLight(color, traceResult.pos, traceResult.normal, lightDir, shadowTraceResult.hit);
      if (debug.debugVal == traceResult.objectId && !traceResult.isOnlyAABB) { finalColor += vec3(0.5, 0, 0); }
    } else if (debug.viewType == VIEW_TYPE_NORMALS) {
      finalColor += traceResult.normal * 0.5f + 0.5f;
    } else if (debug.viewType == VIEW_TYPE_DISTANCE) {
      const float dist = traceResult.distanceInWorldSpace;
      const float z = dist / 100.f;
      finalColor += vec3(1 - z);
    } else if (debug.viewType == VIEW_TYPE_CHILD_INDEX) {
      finalColor += lut[traceResult.childIdx];
    } else if (debug.viewType == VIEW_TYPE_TREE_LEVEL) {
      finalColor += lut[traceResult.stackPtr % 8];
    }
  } else {
    if (debug.viewType == VIEW_TYPE_DISTANCE) {
      finalColor += vec3(0);
    } else {
      finalColor += vec3(1);
    }
  }

  if (hitProbe && debug.viewType == VIEW_TYPE_COLOR) { finalColor = isSelectedProbe ? vec3(1, 0, 0) : vec3(0, 1, 0); }
  if (debug.visualizeBVH == 1 && traceResult.isOnlyAABB && traceResult.aabbHit && debug.viewType == VIEW_TYPE_COLOR) {
    finalColor = lut[traceResult.objectId % 8];
  }

  finalColor = vec3(clamp(finalColor.x, 0.0, 1.0), clamp(finalColor.y, 0.0, 1.0), clamp(finalColor.z, 0.0, 1.0));

  imageStore(computeImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 1.0));
  imageStore(iterImage, ivec2(gl_GlobalInvocationID.xy), vec4(iterColor, 1.0));
}