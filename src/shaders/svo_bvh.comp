#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_debug_printf : enable

#define PI 3.141592
#define INF 10000000000000.0
#define EPSILON 0.001

#define MAX_BOUNCES 40
#define SHADOW 0.35

struct Ray {
  vec3 origin;
  float originSize;
  vec3 direction;
  float directionSize;
};

struct ChildDescriptor {
  uint data1;
  uint data2;
};

#ifndef LOCAL_SIZE_X
#define LOCAL_SIZE_X 8
#endif
#ifndef LOCAL_SIZE_Y
#define LOCAL_SIZE_Y 8
#endif

layout(local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y) in;

struct ModelInfo {
  vec4 scaleAndSvoBufferOffset;// .xyz is scale, floatBitsToInt(.w) is offset
  mat4 objectMatrix;
  mat4 inverseObjectMatrix;
  vec4 AABB1;// xyz is p1.xyz, w is p2.x
  vec4 AABB2;// xy is p2.yz
};

struct BVHNode {
  vec4 AABB1;        // p1.xyz, p2.x
  vec4 AABB2leafNext;// p2.yz, 1bit leaf/node, 31 bit child offset/model index
};

layout(binding = 0, rgba8) uniform image2D computeImage;

layout(binding = 1) uniform UniformCamera {
  vec4 pos;
  vec4 dir;
  vec4 up;
  mat4 view;
  mat4 projection;
  mat4 invProjView;
  float near;
  float far;
  int screenWidth;
  int screenHeight;
}
camera;
layout(binding = 2) uniform UniformLigtValues {
  vec4 pos;
  vec4 ambientColor;
  vec4 diffuseColor;
  vec4 specularColor;
}
light;
layout(std430, binding = 3) buffer VoxelSVO_SSBO {
  //uint infoSectionPtr;
  //uint attachmentsPtr;
  //uint childDescriptors[];
  uint data[];// uint infosectionPtr, uint attachmentsPtr, childDescriptors[]
}
svo;
layout(binding = 4, std140) uniform Debug {
  int viewType;
  int debugVal;
  int shadows;
  float debugFloatVal;
  float iterDivide;
  uint printEnabled;
  uint visualizeBVH;
  uint visualizeProbes;
  uint probeVisualType;// 0 disabled, 1 color, 2 normal, 3 depth
}
debug;
layout(binding = 5, r32f) uniform image2D iterImage;
layout(std430, binding = 6) buffer SVOModelInfos { ModelInfo infos[]; }
modelInfos;
layout(std430, binding = 7) buffer BVHModelAABBs { BVHNode nodes[]; }
bvh;
layout(std430, binding = 8) buffer LightFieldProbes { vec4 probes[]; }
lfp;
layout(binding = 9, rgba8) uniform image2D debugProbeImage;
layout(binding = 10, rg32f) uniform image2DArray probeImages;

#define SVO_HEADER_SIZE 2

const uint BVH_OFFSET_MASK = 0x7FFFFFFF;
const uint BVH_LEAF_NODE_MASK = ~BVH_OFFSET_MASK;

#define COLOR_VIEW 0
#define NORMAL_VIEW 1
#define ITER_VIEW 2
#define DISTANCE_VIEW 3
#define CHILD_INDEX_VIEW 4
#define TREE_LEVEL_VIEW 5

float max(vec2 v) { return max(v.x, v.y); }
float max(vec3 v) { return max(max(v.x, v.y), v.z); }
float max(vec4 v) { return max(max(max(v.x, v.y), v.z), v.a); }

float min(vec2 v) { return min(v.x, v.y); }
float min(vec3 v) { return min(min(v.x, v.y), v.z); }
float min(vec4 v) { return min(min(min(v.x, v.y), v.z), v.a); }

/*********************** STACK ******************************/
#define SVO_STACK_SIZE 23
#define SVO_CAST_STACK_DEPTH SVO_STACK_SIZE
struct SvoStackData {
  int node;
  float tMax;
  uint offset;
};

SvoStackData svoStack[SVO_STACK_SIZE + 1];

#define READ_SVO_STACK(stack, idx) stack[idx]
#define WRITE_SVO_STACK(stack, idx, n, tmax, o)                                                                        \
  stack[idx].node = n;                                                                                                 \
  stack[idx].tMax = tmax;                                                                                              \
  stack[idx].offset = o

#define BVH_STACK_SIZE 23
struct BvhStackData {
  uint node;
};

#define BVH_STACK_SIZE 23
BvhStackData bvhStack[BVH_STACK_SIZE];

#define READ_BVH_STACK(stack, idx) stack[idx].node
#define WRITE_BVH_STACK(stack, idx, n) stack[idx].node = n;

/************************************************************/
#define RED vec3(1, 0, 0)
#define BLUE vec3(0, 0, 1)

struct BoundingBox {
  vec3 p1;
  vec3 p2;
};

vec3 getCameraRayDir(vec2 coord, vec3 camPos, vec3 camForward) {
  const vec3 camRight = normalize(cross(camera.up.xyz, camForward));
  const vec3 camUp = normalize(cross(camForward, camRight));
  const float fPersp = 1;
  return normalize(coord.x * camRight + coord.y * camUp + camForward * fPersp) * 500;
}

vec2 normalizeScreenCoords(vec2 screenCoord, vec2 resolution) {
  vec2 result = 2.0 * (screenCoord / resolution.xy - 0.5);
  result.x *= resolution.x / float(resolution.y);
  return result;
}

struct Box {
  vec3 pos;
  float sideLen;
};

struct Sphere {
  vec3 position;
  float radius;
};

Sphere LFP_SPHERE = Sphere(vec3(0, 0, 0), 0.01);

float SphereIntersection(Ray ray, Sphere sphere) {
  vec3 delta = ray.origin - sphere.position;
  float b = dot((delta * 2), ray.direction);
  float c = dot(delta, delta) - (sphere.radius * sphere.radius);

  float disc = b * b - 4 * c;
  if (disc < 0) return 0;
  else
    disc = sqrt(disc);

  // Always 2 solutions when pulling the square root.
  float result1 = -b + disc;
  float result2 = -b - disc;

  return (result2 > EPSILON) ? result2 / 2 : ((result1 > EPSILON) ? result1 / 2 : 0);
}

struct TraceResult {
  float distance;
  float distanceInWorldSpace;
  vec3 pos;
  vec3 posInWorldSpace;
  uint node;
  uint childIdx;
  bool hit;
  float t;
  int iter;
  int stackPtr;
  vec3 color;
  vec3 normal;
  bool isOnlyAABB;
  uint objectId;
};

/**
  * Check for intersection with AABB.
  */
bool intersectAABB(Ray ray, vec3 boxMin, vec3 boxMax) {
  const vec3 tMin = (boxMin - ray.origin) / ray.direction;
  const vec3 tMax = (boxMax - ray.origin) / ray.direction;
  const vec3 t1 = min(tMin, tMax);
  const vec3 t2 = max(tMin, tMax);
  const float tNear = max(max(t1.x, t1.y), t1.z);
  const float tFar = min(min(t2.x, t2.y), t2.z);
  return tNear > 0.f && tNear < tFar || (tNear < 0.f && tFar > 0.f);
}

struct AABBIntersection {
  bool hit;
  float distance;
};
/**
  * Check for intersection with AABB and get distance.
  */
AABBIntersection intersectAABBDistance(Ray ray, vec3 boxMin, vec3 boxMax) {
  const vec3 tMin = (boxMin - ray.origin) / ray.direction;
  const vec3 tMax = (boxMax - ray.origin) / ray.direction;
  const vec3 t1 = min(tMin, tMax);
  const vec3 t2 = max(tMin, tMax);
  const float tNear = max(max(t1.x, t1.y), t1.z);
  const float tFar = min(min(t2.x, t2.y), t2.z);
  AABBIntersection result;
  result.hit = tNear > 0.f && tNear < tFar || (tNear < 0.f && tFar > 0.f);
  result.distance = tNear;
  return result;
}

#define CHILD_PTR_MASK 0xFFFE0000u

const vec3 lut[8] = vec3[8](vec3(0, 0, 0),// 0
                            vec3(1, 0, 0),// 1
                            vec3(0, 1, 0),// 2
                            vec3(1, 1, 0),// 3
                            vec3(0, 0, 1),// 4
                            vec3(1, 0, 1),// 5
                            vec3(0, 1, 1),// 6
                            vec3(1, 1, 1) // 7
);

#define MAX_RAYCAST_ITERATIONS 10000

TraceResult trace(Ray ray, uint offsetInSVOBuffer) {
  const float epsilon = exp2(-SVO_CAST_STACK_DEPTH);
  float ray_orig_sz = ray.originSize;
  int iter = 0;

  ray.direction.x = abs(ray.direction.x) > epsilon ? ray.direction.x : (ray.direction.x >= 0 ? epsilon : -epsilon);
  ray.direction.y = abs(ray.direction.y) > epsilon ? ray.direction.y : (ray.direction.y >= 0 ? epsilon : -epsilon);
  ray.direction.z = abs(ray.direction.z) > epsilon ? ray.direction.z : (ray.direction.z >= 0 ? epsilon : -epsilon);

  vec3 t_coef = 1.f / -abs(ray.direction);// / 10;

  vec3 t_bias = t_coef * ray.origin;

  int octant_mask = 7;
  const float biasCoef = 3.0f;
  if (ray.direction.x > 0.0f) {
    octant_mask ^= 1;
    t_bias.x = biasCoef * t_coef.x - t_bias.x;
  }
  if (ray.direction.y > 0.0f) {
    octant_mask ^= 2;
    t_bias.y = biasCoef * t_coef.y - t_bias.y;
  }
  if (ray.direction.z > 0.0f) {
    octant_mask ^= 4;
    t_bias.z = biasCoef * t_coef.z - t_bias.z;
  }

  float t_min = max(2.f * t_coef - t_bias);
  float t_max = min(t_coef - t_bias);
  float h = t_max;
  t_min = max(t_min, 0.0f);
  t_max = min(t_max, 1.0f);

  int parent = 0;
  uint nodeOffset = 0;
  ChildDescriptor child_descriptor = ChildDescriptor(0, 0);// invalid until fetched
  int idx = 0;
  vec3 pos = vec3(1.0f, 1.0f, 1.0f);
  int scale = SVO_CAST_STACK_DEPTH - 1;
  float scale_exp2 = 0.5f;// exp2f(scale - s_max)

  const float posCoef = 1.5f;
  if (posCoef * t_coef.x - t_bias.x > t_min) {
    idx ^= 1;
    pos.x = posCoef;
  }
  if (posCoef * t_coef.y - t_bias.y > t_min) {
    idx ^= 2;
    pos.y = posCoef;
  }
  if (posCoef * t_coef.z - t_bias.z > t_min) {
    idx ^= 4;
    pos.z = posCoef;
  }

  TraceResult res;
  vec3 color = vec3(0);
  bool fetch = true;

  while (scale < SVO_CAST_STACK_DEPTH) {
    iter++;
    if (iter > MAX_RAYCAST_ITERATIONS) break;

    // Fetch child descriptor unless it is already valid.

    //if (child_descriptor.childData == 0)
    if (fetch) {
      child_descriptor.data1 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent];
      child_descriptor.data2 = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + 1];
      fetch = false;
    }

    vec3 t_corner = pos * t_coef - t_bias;
    float tc_max = min(t_corner);

    int child_shift = idx ^ octant_mask;// permute child slots based on the mirroring
    uint child_masks = child_descriptor.data1 << child_shift;
    if ((child_masks & 0x8000u) != 0 && t_min <= t_max) {
      // Terminate if the voxel is small enough.
      //if (tc_max * ray.directionSize + ray_orig_sz >= scale_exp2) {
      //    color = lut[child_shift] * 0.5 + 0.1;
      //    break;// at t_min
      //}
      //color = vec3(1, 0, 0);

      // INTERSECT
      // Intersect active t-span with the cube and evaluate
      // tx(), ty(), and tz() at the center of the voxel.

      float tv_max = min(t_max, tc_max);
      float halfScale = scale_exp2 * 0.5f;
      vec3 t_center = halfScale * t_coef + t_corner;

      if (t_min <= tv_max) {
        // Terminate if the corresponding bit in the non-leaf mask is not set.
        if ((child_masks & 0x0080u) != 0) {
          child_shift = 7 - child_shift;
          vec3 norm, t_corner = t_coef * (pos + scale_exp2) - t_bias;
          if (t_corner.x > t_corner.y && t_corner.x > t_corner.z) {
            norm = vec3(-1, 0, 0);
          } else if (t_corner.y > t_corner.z) {
            norm = vec3(0, -1, 0);
          } else {
            norm = vec3(0, 0, -1);
          }

          if ((octant_mask & 1) == 0u) { norm.x = -norm.x; }
          if ((octant_mask & 2) == 0u) { norm.y = -norm.y; }
          if ((octant_mask & 4) == 0u) { norm.z = -norm.z; }
          res.normal = norm;

          uint lookupOffset = svo.data[offsetInSVOBuffer];
          uint lookupEntry = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + lookupOffset + nodeOffset];
          uint lookupEntryMask = lookupEntry & 0xFFu;
          uint siblingOffset = bitCount(lookupEntryMask << (8 - child_shift) & 0xFFu);
          uint attPtr = lookupEntry >> 8u & 0xFFFFFFu;
          attPtr += siblingOffset + svo.data[offsetInSVOBuffer + 1];
          uint phongAttrib = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + attPtr];
          color = vec3((phongAttrib >> 24u & 0xFFu) / 255.f, (phongAttrib >> 16u & 0xFFu) / 255.f,
                       (phongAttrib >> 8 & 0xFFu) / 255.f);
          //color = lut[child_shift] * 0.5f + 0.5f;

          //if ((lookupEntry & 0xFFu) != 0) {
          //    color = RED;
          //} else {
          //    color = BLUE;
          //}

          break;// at t_min (overridden with tv_min).
        }

        // PUSH
        // Write current parent to the stack.

        if (tc_max < h) { WRITE_SVO_STACK(svoStack, scale, parent, t_max, nodeOffset); }
        h = tc_max;

        // Find child descriptor corresponding to the current voxel.

        //uint ptr = child_descriptor.data1 >> 16u;// child pointer
        uint ptr = child_descriptor.data2;// child pointer

        /* if ((child_descriptor.childData & 0x10000) != 0) { // FAR
          ptr = svo.data[offsetInSVOBuffer + SVO_HEADER_SIZE + parent + int(ptr * 2)];
        }*/

        uint validMask = (child_descriptor.data1 >> 8u) & 0xFFu;
        uint leafMask = child_descriptor.data1 & 0xFFu;

        child_shift = 7 - child_shift;

        validMask = validMask << (8 - child_shift) & 0xFFu;
        leafMask = leafMask << (8 - child_shift) & 0xFFu;

        uint ofs = bitCount(validMask) - bitCount(leafMask);

        //color = lut[ofs] * 0.5 + 0.3;
        uint offsetFromParent = ptr + ofs;
        nodeOffset = parent / 2 + offsetFromParent;
        parent = parent + int(offsetFromParent * 2);

        // Select child voxel that the ray enters first.

        idx = 0;
        scale--;
        scale_exp2 = halfScale;

        if (t_center.x > t_min) {
          idx ^= 1;
          pos.x += scale_exp2;
        }
        if (t_center.y > t_min) {
          idx ^= 2;
          pos.y += scale_exp2;
        }
        if (t_center.z > t_min) {
          idx ^= 4;
          pos.z += scale_exp2;
        }

        // Update active t-span and invalidate cached child descriptor.

        t_max = tv_max;
        //child_descriptor.childData = 0;
        fetch = true;
        continue;
      }
    }

    // ADVANCE
    // Step along the ray.
    int step_mask = 0;
    if (t_corner.x <= tc_max) {
      step_mask ^= 1;
      pos.x -= scale_exp2;
    }
    if (t_corner.y <= tc_max) {
      step_mask ^= 2;
      pos.y -= scale_exp2;
    }
    if (t_corner.z <= tc_max) {
      step_mask ^= 4;
      pos.z -= scale_exp2;
    }

    // Update active t-span and flip bits of the child slot index.

    t_min = tc_max;
    idx ^= step_mask;

    // Proceed with pop if the bit flips disagree with the ray direction.

    if ((idx & step_mask) != 0) {
      // POP
      // Find the highest differing bit between the two positions.

      uint differing_bits = 0;
      if ((step_mask & 1) != 0) differing_bits |= floatBitsToInt(pos.x) ^ floatBitsToInt(pos.x + scale_exp2);
      if ((step_mask & 2) != 0) differing_bits |= floatBitsToInt(pos.y) ^ floatBitsToInt(pos.y + scale_exp2);
      if ((step_mask & 4) != 0) differing_bits |= floatBitsToInt(pos.z) ^ floatBitsToInt(pos.z + scale_exp2);
      scale = findMSB(differing_bits);                                        // position of the highest bit
      scale_exp2 = intBitsToFloat((scale - SVO_CAST_STACK_DEPTH + 127) << 23);// exp2f(scale - s_max)

      // Restore parent voxel from the stack.

      parent = READ_SVO_STACK(svoStack, scale).node;
      t_max = READ_SVO_STACK(svoStack, scale).tMax;
      nodeOffset = READ_SVO_STACK(svoStack, scale).offset;

      // Round cube position and extract child slot index.

      int shx = floatBitsToInt(pos.x) >> scale;
      int shy = floatBitsToInt(pos.y) >> scale;
      int shz = floatBitsToInt(pos.z) >> scale;
      pos.x = intBitsToFloat(shx << scale);
      pos.y = intBitsToFloat(shy << scale);
      pos.z = intBitsToFloat(shz << scale);
      idx = (shx & 1) | ((shy & 1) << 1) | ((shz & 1) << 2);

      // Prevent same parent from being stored again and invalidate cached child descriptor.

      h = 0.0f;
      //child_descriptor.childData = 0;
      fetch = true;
    }
  }

  if (scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS) { t_min = 2.0f; }

  // Undo mirroring of the coordinate system.

  if ((octant_mask & 1) == 0) pos.x = 3.0f - scale_exp2 - pos.x;
  if ((octant_mask & 2) == 0) pos.y = 3.0f - scale_exp2 - pos.y;
  if ((octant_mask & 4) == 0) pos.z = 3.0f - scale_exp2 - pos.z;

  // Output results.

  res.t = t_min;
  res.iter = iter;
  res.pos.x = min(max(ray.origin.x + t_min * ray.direction.x, pos.x + epsilon), pos.x + scale_exp2 - epsilon);
  res.pos.y = min(max(ray.origin.y + t_min * ray.direction.y, pos.y + epsilon), pos.y + scale_exp2 - epsilon);
  res.pos.z = min(max(ray.origin.z + t_min * ray.direction.z, pos.z + epsilon), pos.z + scale_exp2 - epsilon);
  res.node = parent;
  res.childIdx = idx ^ octant_mask ^ 7;
  res.stackPtr = scale;
  res.color = color;
  res.hit = !(scale >= SVO_CAST_STACK_DEPTH || iter > MAX_RAYCAST_ITERATIONS);
  return res;
}

vec3 calcLight(TraceResult traceResult, vec3 lightDir, bool isInShadow) {
  const vec3 LAmbient = light.ambientColor.xyz;
  if (isInShadow) { return traceResult.color * LAmbient; }

  const vec3 pos = traceResult.pos;
  const vec3 normal = traceResult.normal;
  const float NoL = max(dot(normal, -lightDir), 0.0);
  const vec3 LDirectional = light.diffuseColor.xyz * NoL;
  const vec3 diffuse = (LDirectional + LAmbient);
  const float specular = dot(normalize(light.pos.xyz - pos), reflect(normalize(pos - camera.pos.xyz), normal));
  vec3 intensity = diffuse + light.specularColor.xyz * (0.25 * pow(clamp(specular, 0.0, 1.0), 200.0));
  return traceResult.color * intensity;
}

TraceResult traceModel(uint modelIndex, Ray ray) {
  ray.origin = (modelInfos.infos[modelIndex].inverseObjectMatrix * vec4(ray.origin, 1)).xyz;
  ray.direction =                                                                                //normalize(
      (transpose(modelInfos.infos[modelIndex].inverseObjectMatrix) * vec4(ray.direction, 0)).xyz;//);
  ray.originSize = 0.02;
  ray.directionSize = 0;
  TraceResult result;
  result.objectId = modelIndex;
  result.hit = false;
  result.iter = 0;

  ray.origin += vec3(1, 1, 1);

  result = trace(ray, floatBitsToUint(modelInfos.infos[modelIndex].scaleAndSvoBufferOffset.w));
  result.objectId = modelIndex;

  return result;
}

#define IS_BVH_NODE_LEAF(node) ((floatBitsToUint(node.AABB2leafNext.z) & BVH_LEAF_NODE_MASK) != 0)
#define GET_BVH_NODE_OFFSET(node) (floatBitsToUint(node.AABB2leafNext.z) & BVH_OFFSET_MASK)
#define GET_BVH_MIN_AABB(node) node.AABB1.xyz
#define GET_BVH_MAX_AABB(node) vec3(node.AABB1.w, node.AABB2leafNext.xy)
//TODO: change bvh visualisation

TraceResult traceBVH(Ray ray, uint idx, uint idy) {
  uint stackTop = 0;
  WRITE_BVH_STACK(bvhStack, stackTop++, 0);

  Ray aabbRay = ray;
  aabbRay.direction = normalize(aabbRay.direction);

  TraceResult result;
  result.hit = false;
  result.isOnlyAABB = true;
  if (debug.visualizeBVH == 1) {
    result.color = vec3(1);
  } else {
    result.color = vec3(0);
  }
  result.iter = 0;
  result.normal = vec3(0);
  TraceResult bestModelResult;
  bestModelResult.hit = false;
  bestModelResult.t = INF;
  bestModelResult.iter = 0;
  while (stackTop != 0) {
    const uint nodeToCheckIdx = READ_BVH_STACK(bvhStack, --stackTop);
    const BVHNode currentNode = bvh.nodes[nodeToCheckIdx];
    const vec3 boxMin = GET_BVH_MIN_AABB(currentNode);
    const vec3 boxMax = GET_BVH_MAX_AABB(currentNode);
    if (debug.visualizeBVH == 1) { ++result.iter; }
    if (intersectAABB(aabbRay, boxMin, boxMax)) {
      if (debug.visualizeBVH == 1) {
        result.hit = true;
        result.color -= lut[nodeToCheckIdx % 7 + 1] / debug.debugFloatVal;
        result.isOnlyAABB = result.isOnlyAABB && true;
      }
      // TODO: if distance to BVH is further away than sucessful hit don't do SVO intersection
      const uint offset = GET_BVH_NODE_OFFSET(currentNode);
      if (IS_BVH_NODE_LEAF(currentNode)) {
        TraceResult modelTraceResult = traceModel(offset, ray);
        if (modelTraceResult.hit && modelTraceResult.t < bestModelResult.t) {
          bestModelResult = modelTraceResult;
          result.isOnlyAABB = false;
        }
        result.iter += modelTraceResult.iter;
      } else {
        WRITE_BVH_STACK(bvhStack, stackTop++, offset);
        WRITE_BVH_STACK(bvhStack, stackTop++, offset + 1);
      }
    }
  }
  if (bestModelResult.hit) {
    bestModelResult.color += result.color;
    bestModelResult.iter = result.iter;
    bestModelResult.isOnlyAABB = result.isOnlyAABB;
    bestModelResult.posInWorldSpace =
        (modelInfos.infos[bestModelResult.objectId].objectMatrix * vec4(bestModelResult.pos - vec3(1, 1, 1), 1)).xyz;
    bestModelResult.distanceInWorldSpace = distance(ray.origin, bestModelResult.posInWorldSpace);
    return bestModelResult;
  }
  result.normal = vec3(0, 0, 0);
  return result;
}

struct BVHDistanceInfo {
  uint modelId;
  float distance;
};

BVHDistanceInfo bvhHitArray[50];// TODO: this size is wrong
TraceResult traceBVHImproved(Ray ray, uint idx, uint idy) {
  uint stackTop = 0;
  WRITE_BVH_STACK(bvhStack, stackTop++, 0);

  Ray aabbRay = ray;
  aabbRay.direction = normalize(aabbRay.direction);

  int hitArrayPos = 0;
  while (stackTop != 0) {
    const uint nodeToCheckIdx = READ_BVH_STACK(bvhStack, --stackTop);
    const BVHNode currentNode = bvh.nodes[nodeToCheckIdx];
    const vec3 boxMin = GET_BVH_MIN_AABB(currentNode);
    const vec3 boxMax = GET_BVH_MAX_AABB(currentNode);
    AABBIntersection aabbIntersection = intersectAABBDistance(aabbRay, boxMin, boxMax);
    if (aabbIntersection.hit) {
      const uint offset = GET_BVH_NODE_OFFSET(currentNode);
      if (IS_BVH_NODE_LEAF(currentNode)) {
        bvhHitArray[hitArrayPos].modelId = offset;
        bvhHitArray[hitArrayPos].distance = aabbIntersection.distance;
        ++hitArrayPos;
      } else {
        WRITE_BVH_STACK(bvhStack, stackTop++, offset);
        WRITE_BVH_STACK(bvhStack, stackTop++, offset + 1);
      }
    }
  }

  BVHDistanceInfo tmp;
  for (int j = 0; j < hitArrayPos - 1; ++j) {
    int swap = j;
    for (int i = j + 1; i < hitArrayPos; ++i) {
      if (bvhHitArray[swap].distance > bvhHitArray[i].distance) { swap = i; }
    }
    tmp = bvhHitArray[swap];
    bvhHitArray[swap] = bvhHitArray[j];
    bvhHitArray[j] = tmp;
  }

  TraceResult result;
  result.hit = false;
  result.isOnlyAABB = true;
  result.iter = 0;
  result.normal = vec3(0);
  result.color = vec3(0);

  TraceResult bestModelResult;
  bestModelResult.hit = false;
  bestModelResult.t = INF;
  bestModelResult.iter = 0;
  bestModelResult.distanceInWorldSpace = INF;
  for (int i = 0; i < hitArrayPos; ++i) {
    if (bvhHitArray[i].distance > bestModelResult.distanceInWorldSpace) { break; }
    TraceResult modelTraceResult = traceModel(bvhHitArray[i].modelId, ray);
    modelTraceResult.posInWorldSpace =
        (modelInfos.infos[modelTraceResult.objectId].objectMatrix * vec4(modelTraceResult.pos - vec3(1, 1, 1), 1)).xyz;
    modelTraceResult.distanceInWorldSpace = distance(ray.origin, modelTraceResult.posInWorldSpace);
    if (modelTraceResult.hit && modelTraceResult.distanceInWorldSpace < bestModelResult.distanceInWorldSpace) {
      bestModelResult = modelTraceResult;
      result.isOnlyAABB = false;
    }
    result.iter += modelTraceResult.iter;
  }

  if (bestModelResult.hit) {
    bestModelResult.color += result.color;
    bestModelResult.iter = result.iter;
    bestModelResult.isOnlyAABB = result.isOnlyAABB;
    return bestModelResult;
  }
  return result;
}

vec2 signNotZero(vec2 v) { return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0); }

vec2 encodeNormal(vec3 normal) {
  const float p = sqrt(normal.z * 8.0 + 8.0);
  return normal.xy / p + 0.5;
}

vec3 decodeNormal(vec2 normal) {
  const vec2 f = normal * 4.0 - 2.0;
  const float fD = dot(f, f);
  const float g = sqrt(1.0 - fD / 4.0);
  const vec2 xy = f * g;
  const float z = 1.0 - fD / 2.0;
  return vec3(xy, z);
}

void main() {
  uint idx = gl_GlobalInvocationID.x;
  uint idy = gl_GlobalInvocationID.y;

  ivec2 dimensions = imageSize(computeImage);
  if (idx > dimensions.x || idy > dimensions.y) { return; }

  vec3 finalColor = vec3(0);
  vec3 iterColor = vec3(0);

  Ray ray;
  const vec2 uv = normalizeScreenCoords(vec2(idx, idy), vec2(dimensions));
  const vec4 nearPlanePos = vec4(uv, 0, 1) * camera.near;
  ray.origin = (camera.invProjView * nearPlanePos).xyz;
  ray.direction =// normalize(
      (camera.invProjView * vec4(uv * (camera.far - camera.near), camera.far + camera.near, camera.far - camera.near))
          .xyz;//);

  TraceResult traceResult;
  traceResult.hit = false;
  traceResult.t = INF;
  traceResult.iter = 0;

  traceResult = traceBVHImproved(ray, idx, idy);

  TraceResult shadowTraceResult;
  shadowTraceResult.hit = false;
  const vec3 hitPointInCameraSpace = traceResult.posInWorldSpace;
  const vec3 lightDir = normalize(light.pos.xyz - hitPointInCameraSpace);
  if (debug.shadows == 1 && traceResult.hit) {
    Ray shadowRay;
    shadowRay.direction = lightDir * 50;// TODO: figure out why this needs to be done
    shadowRay.origin = hitPointInCameraSpace + EPSILON * lightDir;
    shadowRay.originSize = 0.02;
    shadowRay.directionSize = 0;
    shadowTraceResult = traceBVHImproved(shadowRay, idx, idy);
    traceResult.iter += shadowTraceResult.iter;
  }

  if (debug.visualizeProbes == 1) {
    int probeCount = int(lfp.probes[0].w);
    ray.direction = normalize(ray.direction);
    for (int i = 0; i < probeCount; ++i) {
      Sphere sphere = LFP_SPHERE;
      sphere.radius = 0.2f;
      sphere.position = lfp.probes[i].xyz;
      if (SphereIntersection(ray, sphere) > 0) {
        traceResult.hit = true;
        traceResult.color = vec3(0, 1, 0);
      }
    }
  }

  iterColor += vec3(traceResult.iter / debug.iterDivide);
  if (debug.viewType == ITER_VIEW) {
    finalColor += vec3(traceResult.iter / debug.iterDivide);
  } else if (traceResult.hit) {
    if (debug.viewType == COLOR_VIEW) {
      finalColor += calcLight(traceResult, lightDir, shadowTraceResult.hit);
      if (debug.debugVal == traceResult.objectId && !traceResult.isOnlyAABB) { finalColor += vec3(0.5, 0, 0); }
    } else if (debug.viewType == NORMAL_VIEW) {
      finalColor += traceResult.normal * 0.5f + 0.5f;
    } else if (debug.viewType == DISTANCE_VIEW) {
      const float dist = traceResult.distanceInWorldSpace;
      const float z = dist / 100.f;
      finalColor += vec3(1 - z);
    } else if (debug.viewType == CHILD_INDEX_VIEW) {
      finalColor += lut[traceResult.childIdx];
    } else if (debug.viewType == TREE_LEVEL_VIEW) {
      finalColor += lut[traceResult.stackPtr % 8];
    }
  } else {
    if (debug.viewType == DISTANCE_VIEW) {
      finalColor += vec3(0);
    } else {
      finalColor += vec3(1);
    }
  }

  finalColor = vec3(clamp(finalColor.x, 0.0, 1.0), clamp(finalColor.y, 0.0, 1.0), clamp(finalColor.z, 0.0, 1.0));

  imageStore(computeImage, ivec2(gl_GlobalInvocationID.xy), vec4(finalColor, 1.0));
  imageStore(iterImage, ivec2(gl_GlobalInvocationID.xy), vec4(iterColor, 1.0));

  if (gl_GlobalInvocationID.x > 1024 || gl_GlobalInvocationID.y > 1024) { return; }

  {

    vec2 normalisedOctCoords = (vec2(gl_GlobalInvocationID.xy) - 512.0) / 512.0;
    vec3 v = vec3(normalisedOctCoords.xy, 1.0 - abs(normalisedOctCoords.x) - abs(normalisedOctCoords.y));
    if (v.z < 0) { v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy); }
    v = normalize(v);

    Ray probeRay;
    probeRay.origin = lfp.probes[0].xyz;
    probeRay.direction = v * 10;

    TraceResult traceResult;
    traceResult.hit = false;
    traceResult.t = INF;
    traceResult.iter = 0;

    traceResult = traceBVHImproved(probeRay, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    //if (gl_GlobalInvocationID.x != 0 || gl_GlobalInvocationID.y != 0) { return; }

    const vec3 color = traceResult.color;
    const vec3 normal = traceResult.hit ? traceResult.normal : vec3(0);
    const float depth = traceResult.hit ? traceResult.distanceInWorldSpace / 10.f : INF;
    const uint MASK11 = 0x7FF;
    const uint MASK10 = 0x3FF;
    const uint R_MAX = 2047;
    const uint G_MAX = 2047;
    const uint G_SHIFT = 11;
    const uint B_MAX = 1023;
    const uint B_SHIFT = 22;

    const float colorBytes = uintBitsToFloat(uint(color.r * R_MAX) | (uint(color.g * G_MAX) << G_SHIFT)
                                             | (uint(color.b * B_MAX) << B_SHIFT));

    const uint DEPTH_MASK = 0xFFFF;
    const uint DEPTH_MAX = 65535;

    const uint NORMAL_ELEMENT_MAX = 255;
    const uint NORMAL_ELEMENT_MASK = 0xFF;
    const uint NORMALS_SHIFT = 16;
    const uint NORMAL1_SHIFT = 0;
    const uint NORMAL2_SHIFT = 8;

    const vec2 encodedNormal = encodeNormal(traceResult.normal);
    const int encodedBitNormal1 = int(encodedNormal.x * NORMAL_ELEMENT_MAX);
    const int encodedBitNormal2 = int(encodedNormal.y * NORMAL_ELEMENT_MAX);
    const int encodedBitNormal = (encodedBitNormal1 << NORMAL1_SHIFT) | (encodedBitNormal2 << NORMAL2_SHIFT);

    const float depthAndNormalBytes = intBitsToFloat(int(depth * DEPTH_MAX) | (encodedBitNormal << NORMALS_SHIFT));

    const vec2 probeData = vec2(colorBytes, depthAndNormalBytes);

    imageStore(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 0), vec4(probeData, 0, 0));

    if (debug.probeVisualType == 0) { return; }

    uint savedColorBytes =
        floatBitsToUint(imageLoad(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 0)).x);
    const vec3 probeColor =
        vec3(float(savedColorBytes & MASK11) / R_MAX, float((savedColorBytes >> G_SHIFT) & MASK11) / G_MAX,
             float((savedColorBytes >> B_SHIFT) & MASK10) / B_MAX);

    int savedDepthAndNormalBytes =
        floatBitsToInt(imageLoad(probeImages, ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 0)).y);

    float probeDepth = float(savedDepthAndNormalBytes & DEPTH_MASK) / DEPTH_MAX;

    float probeNormalEncoded1 =
        float((savedDepthAndNormalBytes >> (NORMALS_SHIFT + NORMAL1_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
    float probeNormalEncoded2 =
        float((savedDepthAndNormalBytes >> (NORMALS_SHIFT + NORMAL2_SHIFT)) & NORMAL_ELEMENT_MASK) / NORMAL_ELEMENT_MAX;
    vec3 probeNormal = decodeNormal(vec2(probeNormalEncoded1, probeNormalEncoded2));

    if (debug.probeVisualType == 1) {
      imageStore(debugProbeImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(probeColor, 1));
    } else if (debug.probeVisualType == 2) {
      imageStore(debugProbeImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y),
                 vec4(probeNormal * 0.5f + 0.5f, 1));
    } else if (debug.probeVisualType == 3) {
      imageStore(debugProbeImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y),
                 vec4(probeDepth, probeDepth, probeDepth, 1));
    }
  }
}